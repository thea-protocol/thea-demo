// Generated by @wagmi/cli@0.1.10 on 23/2/2023 at 5:00:48 pm
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from "wagmi";
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from "wagmi/actions";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BaseToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const baseTokenABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "burn",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      {
        name: "sig",
        internalType: "struct EIP712Signature",
        type: "tuple",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "burnWithPermit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "accessController_",
        internalType: "contract AccessController",
        type: "address",
      },
      { name: "name_", internalType: "string", type: "string" },
      { name: "symbol_", internalType: "string", type: "string" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      {
        name: "sig",
        internalType: "struct EIP712Signature",
        type: "tuple",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "permit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "sigNonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

export const baseTokenAddress =
  "0xb89b6A3A6DE8Ae535d26E7Ad94A7dD0Be88A6074" as const;

export const baseTokenConfig = {
  address: baseTokenAddress,
  abi: baseTokenABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// VintageToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const vintageTokenABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "burn",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      {
        name: "sig",
        internalType: "struct EIP712Signature",
        type: "tuple",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "burnWithPermit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "accessController_",
        internalType: "contract AccessController",
        type: "address",
      },
      { name: "name_", internalType: "string", type: "string" },
      { name: "symbol_", internalType: "string", type: "string" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      {
        name: "sig",
        internalType: "struct EIP712Signature",
        type: "tuple",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "permit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "sigNonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

export const vintageTokenAddress =
  "0x737146EA29c72931E4FCc9b78Ff2EA28D2553658" as const;

export const vintageTokenConfig = {
  address: vintageTokenAddress,
  abi: vintageTokenABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SDGToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const sdgTokenABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "burn",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      {
        name: "sig",
        internalType: "struct EIP712Signature",
        type: "tuple",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "burnWithPermit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "accessController_",
        internalType: "contract AccessController",
        type: "address",
      },
      { name: "name_", internalType: "string", type: "string" },
      { name: "symbol_", internalType: "string", type: "string" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      {
        name: "sig",
        internalType: "struct EIP712Signature",
        type: "tuple",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "permit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "sigNonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

export const sdgTokenAddress =
  "0xf60eFE9E4DE5F2cA6f1D1F1574A5eb58b759AcE1" as const;

export const sdgTokenConfig = {
  address: sdgTokenAddress,
  abi: sdgTokenABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// RatingToken
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ratingTokenABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "account", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "burn",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      {
        name: "sig",
        internalType: "struct EIP712Signature",
        type: "tuple",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "burnWithPermit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "subtractedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "decreaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "addedValue", internalType: "uint256", type: "uint256" },
    ],
    name: "increaseAllowance",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "accessController_",
        internalType: "contract AccessController",
        type: "address",
      },
      { name: "name_", internalType: "string", type: "string" },
      { name: "symbol_", internalType: "string", type: "string" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      {
        name: "sig",
        internalType: "struct EIP712Signature",
        type: "tuple",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "permit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "sigNonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

export const ratingTokenAddress =
  "0xeC65e4c4f9185409fe152c35A86535F06615bbbf" as const;

export const ratingTokenConfig = {
  address: ratingTokenAddress,
  abi: ratingTokenABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TheaERC1155
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const theaErc1155ABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousAdmin",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "newAdmin",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "AdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "account",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "approved", internalType: "bool", type: "bool", indexed: false },
    ],
    name: "ApprovalForAll",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "beacon",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "BeaconUpgraded",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "ids",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: false,
      },
      {
        name: "values",
        internalType: "uint256[]",
        type: "uint256[]",
        indexed: false,
      },
    ],
    name: "TransferBatch",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "operator",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "value",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "TransferSingle",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "value", internalType: "string", type: "string", indexed: false },
      { name: "id", internalType: "uint256", type: "uint256", indexed: true },
    ],
    name: "URI",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "implementation",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "Upgraded",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
    ],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "accounts", internalType: "address[]", type: "address[]" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "balanceOfBatch",
    outputs: [{ name: "", internalType: "uint256[]", type: "uint256[]" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "burn",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" },
    ],
    name: "burnBatch",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "accessController_",
        internalType: "contract AccessController",
        type: "address",
      },
      { name: "name_", internalType: "string", type: "string" },
      { name: "symbol_", internalType: "string", type: "string" },
      { name: "uri_", internalType: "string", type: "string" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "account", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" },
    ],
    name: "isApprovedForAll",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "mint",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "mintBatch",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
      {
        name: "sig",
        internalType: "struct EIP712Signature",
        type: "tuple",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "permit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "ids", internalType: "uint256[]", type: "uint256[]" },
      { name: "amounts", internalType: "uint256[]", type: "uint256[]" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "safeTransferFrom",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "operator", internalType: "address", type: "address" },
      { name: "approved", internalType: "bool", type: "bool" },
    ],
    name: "setApprovalForAll",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [{ name: "uri_", internalType: "string", type: "string" }],
    name: "setURI",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "sigNonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "accounts", internalType: "address[]", type: "address[]" },
      { name: "id", internalType: "uint256", type: "uint256" },
    ],
    name: "totalBalanceOfBatch",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
    ],
    name: "upgradeTo",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "upgradeToAndCall",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "uri",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
] as const;

export const theaErc1155Address =
  "0x0D1543fA8057487f2FD36A643F1f211B2Bc2B4b5" as const;

export const theaErc1155Config = {
  address: theaErc1155Address,
  abi: theaErc1155ABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// BaseTokenManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const baseTokenManagerABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Converted",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "newVintage",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "updateTimestamp",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "PreparedRollingWindowUpdate",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "Recovered",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "user", internalType: "address", type: "address", indexed: true },
      {
        name: "vintage",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Rolled",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "caller",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "newVintage",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
    ],
    name: "UpdatedRollingWindow",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "baseCharacteristics",
    outputs: [
      { name: "vintage", internalType: "uint256", type: "uint256" },
      { name: "sdgsCount", internalType: "uint256", type: "uint256" },
      { name: "rating", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "baseTokenBeacon",
    outputs: [
      {
        name: "",
        internalType: "contract TheaUpgradeableBeacon",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "baseTokens",
    outputs: [
      { name: "", internalType: "contract BaseERC20", type: "address" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "convert",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "owner", internalType: "address", type: "address" },
      {
        name: "sig",
        internalType: "struct EIP712Signature",
        type: "tuple",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "permit",
        internalType: "struct EIP712Signature",
        type: "tuple",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "convertWithSig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "accessController_",
        internalType: "contract AccessController",
        type: "address",
      },
      {
        name: "baseTokenImplementation",
        internalType: "contract BaseERC20",
        type: "address",
      },
      { name: "baseTokenNamePrefix_", internalType: "string", type: "string" },
      {
        name: "baseTokenSymbolPrefix_",
        internalType: "string",
        type: "string",
      },
      {
        name: "baseCharacteristics_",
        internalType: "struct BaseCharacteristics",
        type: "tuple",
        components: [
          { name: "vccSources", internalType: "string[]", type: "string[]" },
          { name: "countries", internalType: "string[]", type: "string[]" },
          { name: "vintage", internalType: "uint256", type: "uint256" },
          { name: "regions", internalType: "string[]", type: "string[]" },
          { name: "sdgsCount", internalType: "uint256", type: "uint256" },
          {
            name: "boolCharacteristics",
            internalType: "bytes32[]",
            type: "bytes32[]",
          },
          { name: "rating", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "vintageToken_",
        internalType: "contract TheaERC20",
        type: "address",
      },
      {
        name: "sdgToken_",
        internalType: "contract TheaERC20",
        type: "address",
      },
      {
        name: "ratingToken_",
        internalType: "contract TheaERC20",
        type: "address",
      },
      { name: "registry_", internalType: "contract Registry", type: "address" },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "lockedNFTAmountPerVintage",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "minVintage",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256[]", type: "uint256[]" },
      { name: "", internalType: "uint256[]", type: "uint256[]" },
      { name: "", internalType: "bytes", type: "bytes" },
    ],
    name: "onERC1155BatchReceived",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "bytes", type: "bytes" },
    ],
    name: "onERC1155Received",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "pendingVintage",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newBaseVintage", internalType: "uint256", type: "uint256" },
      { name: "updateTimestamp", internalType: "uint256", type: "uint256" },
    ],
    name: "prepareRollingWindowUpdate",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "ratingToken",
    outputs: [
      { name: "", internalType: "contract TheaERC20", type: "address" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "recover",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "owner", internalType: "address", type: "address" },
      {
        name: "sig",
        internalType: "struct EIP712Signature",
        type: "tuple",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "permit",
        internalType: "struct EIP712Signature[]",
        type: "tuple[]",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "recoverWithSig",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "registry",
    outputs: [{ name: "", internalType: "contract Registry", type: "address" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "vintage", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "rollTokens",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "vintage", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "owner", internalType: "address", type: "address" },
      {
        name: "sig",
        internalType: "struct EIP712Signature",
        type: "tuple",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "permit",
        internalType: "struct EIP712Signature[2]",
        type: "tuple[2]",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "rollTokensWithSig",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "sdgToken",
    outputs: [
      { name: "", internalType: "contract TheaERC20", type: "address" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newBaseTokenBeacon",
        internalType: "contract TheaUpgradeableBeacon",
        type: "address",
      },
    ],
    name: "setBaseTokenBeacon",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "sigNonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "theaERC1155",
    outputs: [
      { name: "", internalType: "contract TheaERC1155", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "updateRollingTime",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [],
    name: "updateRollingWindow",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "vintageToken",
    outputs: [
      { name: "", internalType: "contract TheaERC20", type: "address" },
    ],
  },
] as const;

export const baseTokenManagerAddress =
  "0x72b27872C7E72b2E5070EE848477D3b860dD3bc9" as const;

export const baseTokenManagerConfig = {
  address: baseTokenManagerAddress,
  abi: baseTokenManagerABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Registry
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const registryABI = [
  { stateMutability: "nonpayable", type: "constructor", inputs: [] },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "previousAdmin",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "newAdmin",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "AdminChanged",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "beacon",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "BeaconUpgraded",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "requestId",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "status",
        internalType: "enum IRegistry.RetireStatus",
        type: "uint8",
        indexed: false,
      },
      {
        name: "maker",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "ClosedRetireFungible",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "version", internalType: "uint8", type: "uint8", indexed: false },
    ],
    name: "Initialized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "requestId",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "baseToken",
        internalType: "contract BaseERC20",
        type: "address",
        indexed: false,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "maker",
        internalType: "address",
        type: "address",
        indexed: false,
      },
    ],
    name: "RetireFungibleRequested",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "id", internalType: "uint256", type: "uint256", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "detailsId",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Retired",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "projectID",
        internalType: "bytes",
        type: "bytes",
        indexed: true,
      },
      { name: "vintage", internalType: "bytes", type: "bytes", indexed: true },
      {
        name: "projectIDValue",
        internalType: "bytes",
        type: "bytes",
        indexed: false,
      },
      {
        name: "vintageValue",
        internalType: "bytes",
        type: "bytes",
        indexed: false,
      },
      { name: "to", internalType: "address", type: "address", indexed: false },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Tokenized",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "requestId",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "tokenId",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
      {
        name: "offchainAccount",
        internalType: "string",
        type: "string",
        indexed: false,
      },
    ],
    name: "UnwrapRequested",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "newBTMDeployer",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "UpdatedBTMDeployer",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "newBaseTokenManager",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "UpdatedBaseTokenManager",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256", indexed: true },
      {
        name: "newRating",
        internalType: "bytes",
        type: "bytes",
        indexed: false,
      },
    ],
    name: "UpdatedRating",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "requestId",
        internalType: "uint256",
        type: "uint256",
        indexed: true,
      },
      {
        name: "status",
        internalType: "enum IRegistry.Status",
        type: "uint8",
        indexed: false,
      },
      { name: "id", internalType: "uint256", type: "uint256", indexed: false },
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: false,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "UpdatedUnwrapRequest",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "implementation",
        internalType: "address",
        type: "address",
        indexed: true,
      },
    ],
    name: "Upgraded",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "KEY_CHARACTERISTIC",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "baseTokenManager",
    outputs: [
      { name: "", internalType: "contract BaseTokenManager", type: "address" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "btmDeployer",
    outputs: [
      {
        name: "",
        internalType: "contract BaseTokenManagerDeployer",
        type: "address",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "bytes32", type: "bytes32" },
    ],
    name: "characteristics",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "requestId", internalType: "uint256", type: "uint256" },
      {
        name: "status",
        internalType: "enum IRegistry.RetireStatus",
        type: "uint8",
      },
    ],
    name: "closeRetireFungible",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "requestId", internalType: "uint256", type: "uint256" },
      { name: "amountUtilized", internalType: "uint256", type: "uint256" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "amountToRetire", internalType: "uint256", type: "uint256" },
    ],
    name: "executeRetireFungible",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "keys", internalType: "bytes32[]", type: "bytes32[]" },
    ],
    name: "getCharacteristics",
    outputs: [{ name: "", internalType: "bytes[]", type: "bytes[]" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "keys", internalType: "bytes32[]", type: "bytes32[]" },
    ],
    name: "getCharacteristicsBytes",
    outputs: [{ name: "", internalType: "bytes", type: "bytes" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "accessController_",
        internalType: "contract AccessController",
        type: "address",
      },
      {
        name: "theaERC1155_",
        internalType: "contract TheaERC1155",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "tokenId", internalType: "uint256", type: "uint256" }],
    name: "isRegistered",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "isTokenizationIdUsed",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256[]", type: "uint256[]" },
      { name: "", internalType: "uint256[]", type: "uint256[]" },
      { name: "", internalType: "bytes", type: "bytes" },
    ],
    name: "onERC1155BatchReceived",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "uint256", type: "uint256" },
      { name: "", internalType: "bytes", type: "bytes" },
    ],
    name: "onERC1155Received",
    outputs: [{ name: "", internalType: "bytes4", type: "bytes4" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "proxiableUUID",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "keys", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "values", internalType: "bytes[]", type: "bytes[]" },
      { name: "uri", internalType: "string", type: "string" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
    ],
    name: "register",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "keys", internalType: "bytes32[]", type: "bytes32[]" },
      { name: "values", internalType: "bytes[]", type: "bytes[]" },
      { name: "uri", internalType: "string", type: "string" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "tokenizationId", internalType: "uint256", type: "uint256" },
    ],
    name: "registerAndTokenize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "vintage", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "requestRetireFungible",
    outputs: [{ name: "requestId", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "requests",
    outputs: [
      { name: "status", internalType: "enum IRegistry.Status", type: "uint8" },
      { name: "maker", internalType: "address", type: "address" },
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "retire",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "retireFungibleRequestCounter",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "uint256", type: "uint256" }],
    name: "retireRequests",
    outputs: [
      {
        name: "status",
        internalType: "enum IRegistry.RetireStatus",
        type: "uint8",
      },
      { name: "maker", internalType: "address", type: "address" },
      {
        name: "baseToken",
        internalType: "contract BaseERC20",
        type: "address",
      },
      { name: "amountRequested", internalType: "uint256", type: "uint256" },
      { name: "amountRetired", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "detailsId", internalType: "uint256", type: "uint256" },
    ],
    name: "retireWithDetails",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "detailsId", internalType: "uint256", type: "uint256" },
      { name: "owner", internalType: "address", type: "address" },
      {
        name: "sig",
        internalType: "struct EIP712Signature",
        type: "tuple",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "permit",
        internalType: "struct EIP712Signature",
        type: "tuple",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "retireWithDetailsSig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "owner", internalType: "address", type: "address" },
      {
        name: "sig",
        internalType: "struct EIP712Signature",
        type: "tuple",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "permit",
        internalType: "struct EIP712Signature",
        type: "tuple",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "retireWithSig",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newBTMDeployer",
        internalType: "contract BaseTokenManagerDeployer",
        type: "address",
      },
    ],
    name: "setBTMDeployer",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      {
        name: "newBaseTokenManager",
        internalType: "contract BaseTokenManager",
        type: "address",
      },
    ],
    name: "setBaseTokenManager",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "sigNonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "interfaceId", internalType: "bytes4", type: "bytes4" }],
    name: "supportsInterface",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "theaERC1155",
    outputs: [
      { name: "", internalType: "contract TheaERC1155", type: "address" },
    ],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "tokenizationId", internalType: "uint256", type: "uint256" },
    ],
    name: "tokenize",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "offchainAccount", internalType: "string", type: "string" },
    ],
    name: "unwrap",
    outputs: [{ name: "requestId", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "unwrapRequestCounter",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "id", internalType: "uint256", type: "uint256" },
      { name: "amount", internalType: "uint256", type: "uint256" },
      { name: "offchainAccount", internalType: "string", type: "string" },
      { name: "owner", internalType: "address", type: "address" },
      {
        name: "sig",
        internalType: "struct EIP712Signature",
        type: "tuple",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
      {
        name: "permit",
        internalType: "struct EIP712Signature",
        type: "tuple",
        components: [
          { name: "v", internalType: "uint8", type: "uint8" },
          { name: "r", internalType: "bytes32", type: "bytes32" },
          { name: "s", internalType: "bytes32", type: "bytes32" },
          { name: "deadline", internalType: "uint256", type: "uint256" },
        ],
      },
    ],
    name: "unwrapWithSig",
    outputs: [{ name: "requestId", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "tokenId", internalType: "uint256", type: "uint256" },
      { name: "newRatingValue", internalType: "bytes", type: "bytes" },
    ],
    name: "updateRating",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "requestId", internalType: "uint256", type: "uint256" },
      { name: "accepted", internalType: "bool", type: "bool" },
    ],
    name: "updateUnwrapRequest",
    outputs: [],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
    ],
    name: "upgradeTo",
    outputs: [],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "newImplementation", internalType: "address", type: "address" },
      { name: "data", internalType: "bytes", type: "bytes" },
    ],
    name: "upgradeToAndCall",
    outputs: [],
  },
] as const;

export const registryAddress =
  "0xA435D49FD8f892e6a070d5b4f6731b2331F6829d" as const;

export const registryConfig = {
  address: registryAddress,
  abi: registryABI,
} as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link baseTokenABI}__.
 */
export function useBaseToken(
  config: Omit<UseContractConfig, "abi" | "address"> = {} as any
) {
  return useContract({
    abi: baseTokenABI,
    address: baseTokenAddress,
    ...config,
  });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenABI}__.
 */
export function useBaseTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof baseTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof baseTokenABI, TFunctionName, TSelectData>,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenABI,
    address: baseTokenAddress,
    ...config,
  } as UseContractReadConfig<typeof baseTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useBaseTokenDomainSeparator<
  TSelectData = ReadContractResult<typeof baseTokenABI, "DOMAIN_SEPARATOR">
>(
  config: Omit<
    UseContractReadConfig<typeof baseTokenABI, "DOMAIN_SEPARATOR", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<
    typeof baseTokenABI,
    "DOMAIN_SEPARATOR",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useBaseTokenAllowance<
  TSelectData = ReadContractResult<typeof baseTokenABI, "allowance">
>(
  config: Omit<
    UseContractReadConfig<typeof baseTokenABI, "allowance", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof baseTokenABI, "allowance", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useBaseTokenBalanceOf<
  TSelectData = ReadContractResult<typeof baseTokenABI, "balanceOf">
>(
  config: Omit<
    UseContractReadConfig<typeof baseTokenABI, "balanceOf", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof baseTokenABI, "balanceOf", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useBaseTokenDecimals<
  TSelectData = ReadContractResult<typeof baseTokenABI, "decimals">
>(
  config: Omit<
    UseContractReadConfig<typeof baseTokenABI, "decimals", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof baseTokenABI, "decimals", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"name"`.
 */
export function useBaseTokenName<
  TSelectData = ReadContractResult<typeof baseTokenABI, "name">
>(
  config: Omit<
    UseContractReadConfig<typeof baseTokenABI, "name", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof baseTokenABI, "name", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"sigNonces"`.
 */
export function useBaseTokenSigNonces<
  TSelectData = ReadContractResult<typeof baseTokenABI, "sigNonces">
>(
  config: Omit<
    UseContractReadConfig<typeof baseTokenABI, "sigNonces", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "sigNonces",
    ...config,
  } as UseContractReadConfig<typeof baseTokenABI, "sigNonces", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useBaseTokenSymbol<
  TSelectData = ReadContractResult<typeof baseTokenABI, "symbol">
>(
  config: Omit<
    UseContractReadConfig<typeof baseTokenABI, "symbol", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof baseTokenABI, "symbol", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useBaseTokenTotalSupply<
  TSelectData = ReadContractResult<typeof baseTokenABI, "totalSupply">
>(
  config: Omit<
    UseContractReadConfig<typeof baseTokenABI, "totalSupply", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof baseTokenABI, "totalSupply", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenABI}__.
 */
export function useBaseTokenWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof baseTokenABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof baseTokenABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof baseTokenABI, TFunctionName>({
    abi: baseTokenABI,
    address: baseTokenAddress,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useBaseTokenApprove<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof baseTokenABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof baseTokenABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<TMode, typeof baseTokenABI, "approve">({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"burn"`.
 */
export function useBaseTokenBurn<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof baseTokenABI, "burn">["abi"],
        "burn"
      > & { functionName?: "burn" }
    : UseContractWriteConfig<TMode, typeof baseTokenABI, "burn"> & {
        abi?: never;
        functionName?: "burn";
      } = {} as any
) {
  return useContractWrite<TMode, typeof baseTokenABI, "burn">({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "burn",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"burnWithPermit"`.
 */
export function useBaseTokenBurnWithPermit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof baseTokenABI,
          "burnWithPermit"
        >["abi"],
        "burnWithPermit"
      > & { functionName?: "burnWithPermit" }
    : UseContractWriteConfig<TMode, typeof baseTokenABI, "burnWithPermit"> & {
        abi?: never;
        functionName?: "burnWithPermit";
      } = {} as any
) {
  return useContractWrite<TMode, typeof baseTokenABI, "burnWithPermit">({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "burnWithPermit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useBaseTokenDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof baseTokenABI,
          "decreaseAllowance"
        >["abi"],
        "decreaseAllowance"
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        TMode,
        typeof baseTokenABI,
        "decreaseAllowance"
      > & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any
) {
  return useContractWrite<TMode, typeof baseTokenABI, "decreaseAllowance">({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useBaseTokenIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof baseTokenABI,
          "increaseAllowance"
        >["abi"],
        "increaseAllowance"
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        TMode,
        typeof baseTokenABI,
        "increaseAllowance"
      > & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any
) {
  return useContractWrite<TMode, typeof baseTokenABI, "increaseAllowance">({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function useBaseTokenInitialize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof baseTokenABI, "initialize">["abi"],
        "initialize"
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<TMode, typeof baseTokenABI, "initialize"> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any
) {
  return useContractWrite<TMode, typeof baseTokenABI, "initialize">({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useBaseTokenMint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof baseTokenABI, "mint">["abi"],
        "mint"
      > & { functionName?: "mint" }
    : UseContractWriteConfig<TMode, typeof baseTokenABI, "mint"> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any
) {
  return useContractWrite<TMode, typeof baseTokenABI, "mint">({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"permit"`.
 */
export function useBaseTokenPermit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof baseTokenABI, "permit">["abi"],
        "permit"
      > & { functionName?: "permit" }
    : UseContractWriteConfig<TMode, typeof baseTokenABI, "permit"> & {
        abi?: never;
        functionName?: "permit";
      } = {} as any
) {
  return useContractWrite<TMode, typeof baseTokenABI, "permit">({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useBaseTokenTransfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof baseTokenABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof baseTokenABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<TMode, typeof baseTokenABI, "transfer">({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useBaseTokenTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof baseTokenABI, "transferFrom">["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof baseTokenABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<TMode, typeof baseTokenABI, "transferFrom">({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenABI}__.
 */
export function usePrepareBaseTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseTokenABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenABI,
    address: baseTokenAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareBaseTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseTokenABI, "approve">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseTokenABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareBaseTokenBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseTokenABI, "burn">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "burn",
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseTokenABI, "burn">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"burnWithPermit"`.
 */
export function usePrepareBaseTokenBurnWithPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseTokenABI, "burnWithPermit">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "burnWithPermit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseTokenABI, "burnWithPermit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareBaseTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseTokenABI, "decreaseAllowance">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseTokenABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareBaseTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseTokenABI, "increaseAllowance">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseTokenABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareBaseTokenInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseTokenABI, "initialize">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseTokenABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareBaseTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseTokenABI, "mint">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseTokenABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareBaseTokenPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseTokenABI, "permit">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseTokenABI, "permit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareBaseTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseTokenABI, "transfer">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseTokenABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareBaseTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseTokenABI, "transferFrom">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenABI,
    address: baseTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseTokenABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link baseTokenABI}__.
 */
export function useBaseTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof baseTokenABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: baseTokenABI,
    address: baseTokenAddress,
    ...config,
  } as UseContractEventConfig<typeof baseTokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link baseTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useBaseTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof baseTokenABI, "Approval">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: baseTokenABI,
    address: baseTokenAddress,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof baseTokenABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link baseTokenABI}__ and `eventName` set to `"Initialized"`.
 */
export function useBaseTokenInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof baseTokenABI, "Initialized">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: baseTokenABI,
    address: baseTokenAddress,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof baseTokenABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link baseTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useBaseTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof baseTokenABI, "Transfer">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: baseTokenABI,
    address: baseTokenAddress,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof baseTokenABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link vintageTokenABI}__.
 */
export function useVintageToken(
  config: Omit<UseContractConfig, "abi" | "address"> = {} as any
) {
  return useContract({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    ...config,
  });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vintageTokenABI}__.
 */
export function useVintageTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof vintageTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof vintageTokenABI, TFunctionName, TSelectData>,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    ...config,
  } as UseContractReadConfig<
    typeof vintageTokenABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useVintageTokenDomainSeparator<
  TSelectData = ReadContractResult<typeof vintageTokenABI, "DOMAIN_SEPARATOR">
>(
  config: Omit<
    UseContractReadConfig<
      typeof vintageTokenABI,
      "DOMAIN_SEPARATOR",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<
    typeof vintageTokenABI,
    "DOMAIN_SEPARATOR",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useVintageTokenAllowance<
  TSelectData = ReadContractResult<typeof vintageTokenABI, "allowance">
>(
  config: Omit<
    UseContractReadConfig<typeof vintageTokenABI, "allowance", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof vintageTokenABI, "allowance", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useVintageTokenBalanceOf<
  TSelectData = ReadContractResult<typeof vintageTokenABI, "balanceOf">
>(
  config: Omit<
    UseContractReadConfig<typeof vintageTokenABI, "balanceOf", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof vintageTokenABI, "balanceOf", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useVintageTokenDecimals<
  TSelectData = ReadContractResult<typeof vintageTokenABI, "decimals">
>(
  config: Omit<
    UseContractReadConfig<typeof vintageTokenABI, "decimals", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof vintageTokenABI, "decimals", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"name"`.
 */
export function useVintageTokenName<
  TSelectData = ReadContractResult<typeof vintageTokenABI, "name">
>(
  config: Omit<
    UseContractReadConfig<typeof vintageTokenABI, "name", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof vintageTokenABI, "name", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"sigNonces"`.
 */
export function useVintageTokenSigNonces<
  TSelectData = ReadContractResult<typeof vintageTokenABI, "sigNonces">
>(
  config: Omit<
    UseContractReadConfig<typeof vintageTokenABI, "sigNonces", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "sigNonces",
    ...config,
  } as UseContractReadConfig<typeof vintageTokenABI, "sigNonces", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useVintageTokenSymbol<
  TSelectData = ReadContractResult<typeof vintageTokenABI, "symbol">
>(
  config: Omit<
    UseContractReadConfig<typeof vintageTokenABI, "symbol", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof vintageTokenABI, "symbol", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useVintageTokenTotalSupply<
  TSelectData = ReadContractResult<typeof vintageTokenABI, "totalSupply">
>(
  config: Omit<
    UseContractReadConfig<typeof vintageTokenABI, "totalSupply", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<
    typeof vintageTokenABI,
    "totalSupply",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vintageTokenABI}__.
 */
export function useVintageTokenWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vintageTokenABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof vintageTokenABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof vintageTokenABI, TFunctionName>({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useVintageTokenApprove<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vintageTokenABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof vintageTokenABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<TMode, typeof vintageTokenABI, "approve">({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"burn"`.
 */
export function useVintageTokenBurn<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vintageTokenABI, "burn">["abi"],
        "burn"
      > & { functionName?: "burn" }
    : UseContractWriteConfig<TMode, typeof vintageTokenABI, "burn"> & {
        abi?: never;
        functionName?: "burn";
      } = {} as any
) {
  return useContractWrite<TMode, typeof vintageTokenABI, "burn">({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "burn",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"burnWithPermit"`.
 */
export function useVintageTokenBurnWithPermit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof vintageTokenABI,
          "burnWithPermit"
        >["abi"],
        "burnWithPermit"
      > & { functionName?: "burnWithPermit" }
    : UseContractWriteConfig<
        TMode,
        typeof vintageTokenABI,
        "burnWithPermit"
      > & {
        abi?: never;
        functionName?: "burnWithPermit";
      } = {} as any
) {
  return useContractWrite<TMode, typeof vintageTokenABI, "burnWithPermit">({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "burnWithPermit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useVintageTokenDecreaseAllowance<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof vintageTokenABI,
          "decreaseAllowance"
        >["abi"],
        "decreaseAllowance"
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        TMode,
        typeof vintageTokenABI,
        "decreaseAllowance"
      > & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any
) {
  return useContractWrite<TMode, typeof vintageTokenABI, "decreaseAllowance">({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useVintageTokenIncreaseAllowance<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof vintageTokenABI,
          "increaseAllowance"
        >["abi"],
        "increaseAllowance"
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        TMode,
        typeof vintageTokenABI,
        "increaseAllowance"
      > & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any
) {
  return useContractWrite<TMode, typeof vintageTokenABI, "increaseAllowance">({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function useVintageTokenInitialize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vintageTokenABI, "initialize">["abi"],
        "initialize"
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<TMode, typeof vintageTokenABI, "initialize"> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any
) {
  return useContractWrite<TMode, typeof vintageTokenABI, "initialize">({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useVintageTokenMint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vintageTokenABI, "mint">["abi"],
        "mint"
      > & { functionName?: "mint" }
    : UseContractWriteConfig<TMode, typeof vintageTokenABI, "mint"> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any
) {
  return useContractWrite<TMode, typeof vintageTokenABI, "mint">({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"permit"`.
 */
export function useVintageTokenPermit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vintageTokenABI, "permit">["abi"],
        "permit"
      > & { functionName?: "permit" }
    : UseContractWriteConfig<TMode, typeof vintageTokenABI, "permit"> & {
        abi?: never;
        functionName?: "permit";
      } = {} as any
) {
  return useContractWrite<TMode, typeof vintageTokenABI, "permit">({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useVintageTokenTransfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof vintageTokenABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof vintageTokenABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<TMode, typeof vintageTokenABI, "transfer">({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useVintageTokenTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof vintageTokenABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof vintageTokenABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<TMode, typeof vintageTokenABI, "transferFrom">({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vintageTokenABI}__.
 */
export function usePrepareVintageTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vintageTokenABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof vintageTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareVintageTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vintageTokenABI, "approve">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vintageTokenABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareVintageTokenBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vintageTokenABI, "burn">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "burn",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vintageTokenABI, "burn">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"burnWithPermit"`.
 */
export function usePrepareVintageTokenBurnWithPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vintageTokenABI, "burnWithPermit">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "burnWithPermit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vintageTokenABI, "burnWithPermit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareVintageTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vintageTokenABI, "decreaseAllowance">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vintageTokenABI,
    "decreaseAllowance"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareVintageTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vintageTokenABI, "increaseAllowance">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof vintageTokenABI,
    "increaseAllowance"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareVintageTokenInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vintageTokenABI, "initialize">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vintageTokenABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareVintageTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vintageTokenABI, "mint">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vintageTokenABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareVintageTokenPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vintageTokenABI, "permit">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vintageTokenABI, "permit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareVintageTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vintageTokenABI, "transfer">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vintageTokenABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link vintageTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareVintageTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof vintageTokenABI, "transferFrom">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof vintageTokenABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vintageTokenABI}__.
 */
export function useVintageTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof vintageTokenABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    ...config,
  } as UseContractEventConfig<typeof vintageTokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vintageTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useVintageTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof vintageTokenABI, "Approval">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof vintageTokenABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vintageTokenABI}__ and `eventName` set to `"Initialized"`.
 */
export function useVintageTokenInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof vintageTokenABI, "Initialized">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof vintageTokenABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link vintageTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useVintageTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof vintageTokenABI, "Transfer">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: vintageTokenABI,
    address: vintageTokenAddress,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof vintageTokenABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link sdgTokenABI}__.
 */
export function useSdgToken(
  config: Omit<UseContractConfig, "abi" | "address"> = {} as any
) {
  return useContract({ abi: sdgTokenABI, address: sdgTokenAddress, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sdgTokenABI}__.
 */
export function useSdgTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof sdgTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof sdgTokenABI, TFunctionName, TSelectData>,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    ...config,
  } as UseContractReadConfig<typeof sdgTokenABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useSdgTokenDomainSeparator<
  TSelectData = ReadContractResult<typeof sdgTokenABI, "DOMAIN_SEPARATOR">
>(
  config: Omit<
    UseContractReadConfig<typeof sdgTokenABI, "DOMAIN_SEPARATOR", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<
    typeof sdgTokenABI,
    "DOMAIN_SEPARATOR",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useSdgTokenAllowance<
  TSelectData = ReadContractResult<typeof sdgTokenABI, "allowance">
>(
  config: Omit<
    UseContractReadConfig<typeof sdgTokenABI, "allowance", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof sdgTokenABI, "allowance", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useSdgTokenBalanceOf<
  TSelectData = ReadContractResult<typeof sdgTokenABI, "balanceOf">
>(
  config: Omit<
    UseContractReadConfig<typeof sdgTokenABI, "balanceOf", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof sdgTokenABI, "balanceOf", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useSdgTokenDecimals<
  TSelectData = ReadContractResult<typeof sdgTokenABI, "decimals">
>(
  config: Omit<
    UseContractReadConfig<typeof sdgTokenABI, "decimals", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof sdgTokenABI, "decimals", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"name"`.
 */
export function useSdgTokenName<
  TSelectData = ReadContractResult<typeof sdgTokenABI, "name">
>(
  config: Omit<
    UseContractReadConfig<typeof sdgTokenABI, "name", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof sdgTokenABI, "name", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"sigNonces"`.
 */
export function useSdgTokenSigNonces<
  TSelectData = ReadContractResult<typeof sdgTokenABI, "sigNonces">
>(
  config: Omit<
    UseContractReadConfig<typeof sdgTokenABI, "sigNonces", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "sigNonces",
    ...config,
  } as UseContractReadConfig<typeof sdgTokenABI, "sigNonces", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useSdgTokenSymbol<
  TSelectData = ReadContractResult<typeof sdgTokenABI, "symbol">
>(
  config: Omit<
    UseContractReadConfig<typeof sdgTokenABI, "symbol", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof sdgTokenABI, "symbol", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useSdgTokenTotalSupply<
  TSelectData = ReadContractResult<typeof sdgTokenABI, "totalSupply">
>(
  config: Omit<
    UseContractReadConfig<typeof sdgTokenABI, "totalSupply", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof sdgTokenABI, "totalSupply", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sdgTokenABI}__.
 */
export function useSdgTokenWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sdgTokenABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof sdgTokenABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof sdgTokenABI, TFunctionName>({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useSdgTokenApprove<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sdgTokenABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof sdgTokenABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<TMode, typeof sdgTokenABI, "approve">({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"burn"`.
 */
export function useSdgTokenBurn<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sdgTokenABI, "burn">["abi"],
        "burn"
      > & { functionName?: "burn" }
    : UseContractWriteConfig<TMode, typeof sdgTokenABI, "burn"> & {
        abi?: never;
        functionName?: "burn";
      } = {} as any
) {
  return useContractWrite<TMode, typeof sdgTokenABI, "burn">({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "burn",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"burnWithPermit"`.
 */
export function useSdgTokenBurnWithPermit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sdgTokenABI, "burnWithPermit">["abi"],
        "burnWithPermit"
      > & { functionName?: "burnWithPermit" }
    : UseContractWriteConfig<TMode, typeof sdgTokenABI, "burnWithPermit"> & {
        abi?: never;
        functionName?: "burnWithPermit";
      } = {} as any
) {
  return useContractWrite<TMode, typeof sdgTokenABI, "burnWithPermit">({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "burnWithPermit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useSdgTokenDecreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof sdgTokenABI,
          "decreaseAllowance"
        >["abi"],
        "decreaseAllowance"
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<TMode, typeof sdgTokenABI, "decreaseAllowance"> & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any
) {
  return useContractWrite<TMode, typeof sdgTokenABI, "decreaseAllowance">({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useSdgTokenIncreaseAllowance<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof sdgTokenABI,
          "increaseAllowance"
        >["abi"],
        "increaseAllowance"
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<TMode, typeof sdgTokenABI, "increaseAllowance"> & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any
) {
  return useContractWrite<TMode, typeof sdgTokenABI, "increaseAllowance">({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function useSdgTokenInitialize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sdgTokenABI, "initialize">["abi"],
        "initialize"
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<TMode, typeof sdgTokenABI, "initialize"> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any
) {
  return useContractWrite<TMode, typeof sdgTokenABI, "initialize">({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useSdgTokenMint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sdgTokenABI, "mint">["abi"],
        "mint"
      > & { functionName?: "mint" }
    : UseContractWriteConfig<TMode, typeof sdgTokenABI, "mint"> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any
) {
  return useContractWrite<TMode, typeof sdgTokenABI, "mint">({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"permit"`.
 */
export function useSdgTokenPermit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sdgTokenABI, "permit">["abi"],
        "permit"
      > & { functionName?: "permit" }
    : UseContractWriteConfig<TMode, typeof sdgTokenABI, "permit"> & {
        abi?: never;
        functionName?: "permit";
      } = {} as any
) {
  return useContractWrite<TMode, typeof sdgTokenABI, "permit">({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useSdgTokenTransfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sdgTokenABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof sdgTokenABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<TMode, typeof sdgTokenABI, "transfer">({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useSdgTokenTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof sdgTokenABI, "transferFrom">["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof sdgTokenABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<TMode, typeof sdgTokenABI, "transferFrom">({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sdgTokenABI}__.
 */
export function usePrepareSdgTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sdgTokenABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof sdgTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareSdgTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sdgTokenABI, "approve">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof sdgTokenABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareSdgTokenBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sdgTokenABI, "burn">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "burn",
    ...config,
  } as UsePrepareContractWriteConfig<typeof sdgTokenABI, "burn">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"burnWithPermit"`.
 */
export function usePrepareSdgTokenBurnWithPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sdgTokenABI, "burnWithPermit">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "burnWithPermit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof sdgTokenABI, "burnWithPermit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareSdgTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sdgTokenABI, "decreaseAllowance">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof sdgTokenABI, "decreaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareSdgTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sdgTokenABI, "increaseAllowance">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<typeof sdgTokenABI, "increaseAllowance">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareSdgTokenInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sdgTokenABI, "initialize">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof sdgTokenABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareSdgTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sdgTokenABI, "mint">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof sdgTokenABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareSdgTokenPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sdgTokenABI, "permit">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof sdgTokenABI, "permit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareSdgTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sdgTokenABI, "transfer">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof sdgTokenABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link sdgTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareSdgTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof sdgTokenABI, "transferFrom">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof sdgTokenABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sdgTokenABI}__.
 */
export function useSdgTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof sdgTokenABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    ...config,
  } as UseContractEventConfig<typeof sdgTokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sdgTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useSdgTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof sdgTokenABI, "Approval">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof sdgTokenABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sdgTokenABI}__ and `eventName` set to `"Initialized"`.
 */
export function useSdgTokenInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof sdgTokenABI, "Initialized">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof sdgTokenABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link sdgTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useSdgTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof sdgTokenABI, "Transfer">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: sdgTokenABI,
    address: sdgTokenAddress,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof sdgTokenABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ratingTokenABI}__.
 */
export function useRatingToken(
  config: Omit<UseContractConfig, "abi" | "address"> = {} as any
) {
  return useContract({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    ...config,
  });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ratingTokenABI}__.
 */
export function useRatingTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof ratingTokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof ratingTokenABI, TFunctionName, TSelectData>,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    ...config,
  } as UseContractReadConfig<
    typeof ratingTokenABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useRatingTokenDomainSeparator<
  TSelectData = ReadContractResult<typeof ratingTokenABI, "DOMAIN_SEPARATOR">
>(
  config: Omit<
    UseContractReadConfig<
      typeof ratingTokenABI,
      "DOMAIN_SEPARATOR",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<
    typeof ratingTokenABI,
    "DOMAIN_SEPARATOR",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useRatingTokenAllowance<
  TSelectData = ReadContractResult<typeof ratingTokenABI, "allowance">
>(
  config: Omit<
    UseContractReadConfig<typeof ratingTokenABI, "allowance", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof ratingTokenABI, "allowance", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useRatingTokenBalanceOf<
  TSelectData = ReadContractResult<typeof ratingTokenABI, "balanceOf">
>(
  config: Omit<
    UseContractReadConfig<typeof ratingTokenABI, "balanceOf", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof ratingTokenABI, "balanceOf", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useRatingTokenDecimals<
  TSelectData = ReadContractResult<typeof ratingTokenABI, "decimals">
>(
  config: Omit<
    UseContractReadConfig<typeof ratingTokenABI, "decimals", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof ratingTokenABI, "decimals", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"name"`.
 */
export function useRatingTokenName<
  TSelectData = ReadContractResult<typeof ratingTokenABI, "name">
>(
  config: Omit<
    UseContractReadConfig<typeof ratingTokenABI, "name", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof ratingTokenABI, "name", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"sigNonces"`.
 */
export function useRatingTokenSigNonces<
  TSelectData = ReadContractResult<typeof ratingTokenABI, "sigNonces">
>(
  config: Omit<
    UseContractReadConfig<typeof ratingTokenABI, "sigNonces", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "sigNonces",
    ...config,
  } as UseContractReadConfig<typeof ratingTokenABI, "sigNonces", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useRatingTokenSymbol<
  TSelectData = ReadContractResult<typeof ratingTokenABI, "symbol">
>(
  config: Omit<
    UseContractReadConfig<typeof ratingTokenABI, "symbol", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof ratingTokenABI, "symbol", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useRatingTokenTotalSupply<
  TSelectData = ReadContractResult<typeof ratingTokenABI, "totalSupply">
>(
  config: Omit<
    UseContractReadConfig<typeof ratingTokenABI, "totalSupply", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<
    typeof ratingTokenABI,
    "totalSupply",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ratingTokenABI}__.
 */
export function useRatingTokenWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ratingTokenABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ratingTokenABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof ratingTokenABI, TFunctionName>({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"approve"`.
 */
export function useRatingTokenApprove<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ratingTokenABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof ratingTokenABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<TMode, typeof ratingTokenABI, "approve">({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"burn"`.
 */
export function useRatingTokenBurn<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ratingTokenABI, "burn">["abi"],
        "burn"
      > & { functionName?: "burn" }
    : UseContractWriteConfig<TMode, typeof ratingTokenABI, "burn"> & {
        abi?: never;
        functionName?: "burn";
      } = {} as any
) {
  return useContractWrite<TMode, typeof ratingTokenABI, "burn">({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "burn",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"burnWithPermit"`.
 */
export function useRatingTokenBurnWithPermit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ratingTokenABI,
          "burnWithPermit"
        >["abi"],
        "burnWithPermit"
      > & { functionName?: "burnWithPermit" }
    : UseContractWriteConfig<TMode, typeof ratingTokenABI, "burnWithPermit"> & {
        abi?: never;
        functionName?: "burnWithPermit";
      } = {} as any
) {
  return useContractWrite<TMode, typeof ratingTokenABI, "burnWithPermit">({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "burnWithPermit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function useRatingTokenDecreaseAllowance<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ratingTokenABI,
          "decreaseAllowance"
        >["abi"],
        "decreaseAllowance"
      > & { functionName?: "decreaseAllowance" }
    : UseContractWriteConfig<
        TMode,
        typeof ratingTokenABI,
        "decreaseAllowance"
      > & {
        abi?: never;
        functionName?: "decreaseAllowance";
      } = {} as any
) {
  return useContractWrite<TMode, typeof ratingTokenABI, "decreaseAllowance">({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function useRatingTokenIncreaseAllowance<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ratingTokenABI,
          "increaseAllowance"
        >["abi"],
        "increaseAllowance"
      > & { functionName?: "increaseAllowance" }
    : UseContractWriteConfig<
        TMode,
        typeof ratingTokenABI,
        "increaseAllowance"
      > & {
        abi?: never;
        functionName?: "increaseAllowance";
      } = {} as any
) {
  return useContractWrite<TMode, typeof ratingTokenABI, "increaseAllowance">({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function useRatingTokenInitialize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ratingTokenABI, "initialize">["abi"],
        "initialize"
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<TMode, typeof ratingTokenABI, "initialize"> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any
) {
  return useContractWrite<TMode, typeof ratingTokenABI, "initialize">({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"mint"`.
 */
export function useRatingTokenMint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ratingTokenABI, "mint">["abi"],
        "mint"
      > & { functionName?: "mint" }
    : UseContractWriteConfig<TMode, typeof ratingTokenABI, "mint"> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any
) {
  return useContractWrite<TMode, typeof ratingTokenABI, "mint">({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"permit"`.
 */
export function useRatingTokenPermit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ratingTokenABI, "permit">["abi"],
        "permit"
      > & { functionName?: "permit" }
    : UseContractWriteConfig<TMode, typeof ratingTokenABI, "permit"> & {
        abi?: never;
        functionName?: "permit";
      } = {} as any
) {
  return useContractWrite<TMode, typeof ratingTokenABI, "permit">({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useRatingTokenTransfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ratingTokenABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof ratingTokenABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<TMode, typeof ratingTokenABI, "transfer">({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useRatingTokenTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ratingTokenABI,
          "transferFrom"
        >["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof ratingTokenABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<TMode, typeof ratingTokenABI, "transferFrom">({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ratingTokenABI}__.
 */
export function usePrepareRatingTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ratingTokenABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ratingTokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareRatingTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ratingTokenABI, "approve">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ratingTokenABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareRatingTokenBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ratingTokenABI, "burn">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "burn",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ratingTokenABI, "burn">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"burnWithPermit"`.
 */
export function usePrepareRatingTokenBurnWithPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ratingTokenABI, "burnWithPermit">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "burnWithPermit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ratingTokenABI, "burnWithPermit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"decreaseAllowance"`.
 */
export function usePrepareRatingTokenDecreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ratingTokenABI, "decreaseAllowance">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "decreaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ratingTokenABI,
    "decreaseAllowance"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"increaseAllowance"`.
 */
export function usePrepareRatingTokenIncreaseAllowance(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ratingTokenABI, "increaseAllowance">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "increaseAllowance",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ratingTokenABI,
    "increaseAllowance"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareRatingTokenInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ratingTokenABI, "initialize">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ratingTokenABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareRatingTokenMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ratingTokenABI, "mint">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ratingTokenABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareRatingTokenPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ratingTokenABI, "permit">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ratingTokenABI, "permit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareRatingTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ratingTokenABI, "transfer">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ratingTokenABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ratingTokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareRatingTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ratingTokenABI, "transferFrom">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof ratingTokenABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ratingTokenABI}__.
 */
export function useRatingTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof ratingTokenABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    ...config,
  } as UseContractEventConfig<typeof ratingTokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ratingTokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useRatingTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof ratingTokenABI, "Approval">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof ratingTokenABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ratingTokenABI}__ and `eventName` set to `"Initialized"`.
 */
export function useRatingTokenInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof ratingTokenABI, "Initialized">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof ratingTokenABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link ratingTokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useRatingTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof ratingTokenABI, "Transfer">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: ratingTokenABI,
    address: ratingTokenAddress,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof ratingTokenABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link theaErc1155ABI}__.
 */
export function useTheaErc1155(
  config: Omit<UseContractConfig, "abi" | "address"> = {} as any
) {
  return useContract({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    ...config,
  });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link theaErc1155ABI}__.
 */
export function useTheaErc1155Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof theaErc1155ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof theaErc1155ABI, TFunctionName, TSelectData>,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    ...config,
  } as UseContractReadConfig<
    typeof theaErc1155ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useTheaErc1155DomainSeparator<
  TSelectData = ReadContractResult<typeof theaErc1155ABI, "DOMAIN_SEPARATOR">
>(
  config: Omit<
    UseContractReadConfig<
      typeof theaErc1155ABI,
      "DOMAIN_SEPARATOR",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<
    typeof theaErc1155ABI,
    "DOMAIN_SEPARATOR",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useTheaErc1155BalanceOf<
  TSelectData = ReadContractResult<typeof theaErc1155ABI, "balanceOf">
>(
  config: Omit<
    UseContractReadConfig<typeof theaErc1155ABI, "balanceOf", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof theaErc1155ABI, "balanceOf", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"balanceOfBatch"`.
 */
export function useTheaErc1155BalanceOfBatch<
  TSelectData = ReadContractResult<typeof theaErc1155ABI, "balanceOfBatch">
>(
  config: Omit<
    UseContractReadConfig<typeof theaErc1155ABI, "balanceOfBatch", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "balanceOfBatch",
    ...config,
  } as UseContractReadConfig<
    typeof theaErc1155ABI,
    "balanceOfBatch",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"isApprovedForAll"`.
 */
export function useTheaErc1155IsApprovedForAll<
  TSelectData = ReadContractResult<typeof theaErc1155ABI, "isApprovedForAll">
>(
  config: Omit<
    UseContractReadConfig<
      typeof theaErc1155ABI,
      "isApprovedForAll",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "isApprovedForAll",
    ...config,
  } as UseContractReadConfig<
    typeof theaErc1155ABI,
    "isApprovedForAll",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"name"`.
 */
export function useTheaErc1155Name<
  TSelectData = ReadContractResult<typeof theaErc1155ABI, "name">
>(
  config: Omit<
    UseContractReadConfig<typeof theaErc1155ABI, "name", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof theaErc1155ABI, "name", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useTheaErc1155ProxiableUuid<
  TSelectData = ReadContractResult<typeof theaErc1155ABI, "proxiableUUID">
>(
  config: Omit<
    UseContractReadConfig<typeof theaErc1155ABI, "proxiableUUID", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "proxiableUUID",
    ...config,
  } as UseContractReadConfig<
    typeof theaErc1155ABI,
    "proxiableUUID",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"sigNonces"`.
 */
export function useTheaErc1155SigNonces<
  TSelectData = ReadContractResult<typeof theaErc1155ABI, "sigNonces">
>(
  config: Omit<
    UseContractReadConfig<typeof theaErc1155ABI, "sigNonces", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "sigNonces",
    ...config,
  } as UseContractReadConfig<typeof theaErc1155ABI, "sigNonces", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useTheaErc1155SupportsInterface<
  TSelectData = ReadContractResult<typeof theaErc1155ABI, "supportsInterface">
>(
  config: Omit<
    UseContractReadConfig<
      typeof theaErc1155ABI,
      "supportsInterface",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<
    typeof theaErc1155ABI,
    "supportsInterface",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"symbol"`.
 */
export function useTheaErc1155Symbol<
  TSelectData = ReadContractResult<typeof theaErc1155ABI, "symbol">
>(
  config: Omit<
    UseContractReadConfig<typeof theaErc1155ABI, "symbol", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof theaErc1155ABI, "symbol", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"totalBalanceOfBatch"`.
 */
export function useTheaErc1155TotalBalanceOfBatch<
  TSelectData = ReadContractResult<typeof theaErc1155ABI, "totalBalanceOfBatch">
>(
  config: Omit<
    UseContractReadConfig<
      typeof theaErc1155ABI,
      "totalBalanceOfBatch",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "totalBalanceOfBatch",
    ...config,
  } as UseContractReadConfig<
    typeof theaErc1155ABI,
    "totalBalanceOfBatch",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"uri"`.
 */
export function useTheaErc1155Uri<
  TSelectData = ReadContractResult<typeof theaErc1155ABI, "uri">
>(
  config: Omit<
    UseContractReadConfig<typeof theaErc1155ABI, "uri", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "uri",
    ...config,
  } as UseContractReadConfig<typeof theaErc1155ABI, "uri", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__.
 */
export function useTheaErc1155Write<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof theaErc1155ABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof theaErc1155ABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof theaErc1155ABI, TFunctionName>({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"burn"`.
 */
export function useTheaErc1155Burn<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof theaErc1155ABI, "burn">["abi"],
        "burn"
      > & { functionName?: "burn" }
    : UseContractWriteConfig<TMode, typeof theaErc1155ABI, "burn"> & {
        abi?: never;
        functionName?: "burn";
      } = {} as any
) {
  return useContractWrite<TMode, typeof theaErc1155ABI, "burn">({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "burn",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"burnBatch"`.
 */
export function useTheaErc1155BurnBatch<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof theaErc1155ABI, "burnBatch">["abi"],
        "burnBatch"
      > & { functionName?: "burnBatch" }
    : UseContractWriteConfig<TMode, typeof theaErc1155ABI, "burnBatch"> & {
        abi?: never;
        functionName?: "burnBatch";
      } = {} as any
) {
  return useContractWrite<TMode, typeof theaErc1155ABI, "burnBatch">({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "burnBatch",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"initialize"`.
 */
export function useTheaErc1155Initialize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof theaErc1155ABI, "initialize">["abi"],
        "initialize"
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<TMode, typeof theaErc1155ABI, "initialize"> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any
) {
  return useContractWrite<TMode, typeof theaErc1155ABI, "initialize">({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"mint"`.
 */
export function useTheaErc1155Mint<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof theaErc1155ABI, "mint">["abi"],
        "mint"
      > & { functionName?: "mint" }
    : UseContractWriteConfig<TMode, typeof theaErc1155ABI, "mint"> & {
        abi?: never;
        functionName?: "mint";
      } = {} as any
) {
  return useContractWrite<TMode, typeof theaErc1155ABI, "mint">({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "mint",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"mintBatch"`.
 */
export function useTheaErc1155MintBatch<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof theaErc1155ABI, "mintBatch">["abi"],
        "mintBatch"
      > & { functionName?: "mintBatch" }
    : UseContractWriteConfig<TMode, typeof theaErc1155ABI, "mintBatch"> & {
        abi?: never;
        functionName?: "mintBatch";
      } = {} as any
) {
  return useContractWrite<TMode, typeof theaErc1155ABI, "mintBatch">({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "mintBatch",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"permit"`.
 */
export function useTheaErc1155Permit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof theaErc1155ABI, "permit">["abi"],
        "permit"
      > & { functionName?: "permit" }
    : UseContractWriteConfig<TMode, typeof theaErc1155ABI, "permit"> & {
        abi?: never;
        functionName?: "permit";
      } = {} as any
) {
  return useContractWrite<TMode, typeof theaErc1155ABI, "permit">({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function useTheaErc1155SafeBatchTransferFrom<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof theaErc1155ABI,
          "safeBatchTransferFrom"
        >["abi"],
        "safeBatchTransferFrom"
      > & { functionName?: "safeBatchTransferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof theaErc1155ABI,
        "safeBatchTransferFrom"
      > & {
        abi?: never;
        functionName?: "safeBatchTransferFrom";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof theaErc1155ABI,
    "safeBatchTransferFrom"
  >({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "safeBatchTransferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function useTheaErc1155SafeTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof theaErc1155ABI,
          "safeTransferFrom"
        >["abi"],
        "safeTransferFrom"
      > & { functionName?: "safeTransferFrom" }
    : UseContractWriteConfig<
        TMode,
        typeof theaErc1155ABI,
        "safeTransferFrom"
      > & {
        abi?: never;
        functionName?: "safeTransferFrom";
      } = {} as any
) {
  return useContractWrite<TMode, typeof theaErc1155ABI, "safeTransferFrom">({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "safeTransferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function useTheaErc1155SetApprovalForAll<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof theaErc1155ABI,
          "setApprovalForAll"
        >["abi"],
        "setApprovalForAll"
      > & { functionName?: "setApprovalForAll" }
    : UseContractWriteConfig<
        TMode,
        typeof theaErc1155ABI,
        "setApprovalForAll"
      > & {
        abi?: never;
        functionName?: "setApprovalForAll";
      } = {} as any
) {
  return useContractWrite<TMode, typeof theaErc1155ABI, "setApprovalForAll">({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "setApprovalForAll",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"setURI"`.
 */
export function useTheaErc1155SetUri<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof theaErc1155ABI, "setURI">["abi"],
        "setURI"
      > & { functionName?: "setURI" }
    : UseContractWriteConfig<TMode, typeof theaErc1155ABI, "setURI"> & {
        abi?: never;
        functionName?: "setURI";
      } = {} as any
) {
  return useContractWrite<TMode, typeof theaErc1155ABI, "setURI">({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "setURI",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useTheaErc1155UpgradeTo<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof theaErc1155ABI, "upgradeTo">["abi"],
        "upgradeTo"
      > & { functionName?: "upgradeTo" }
    : UseContractWriteConfig<TMode, typeof theaErc1155ABI, "upgradeTo"> & {
        abi?: never;
        functionName?: "upgradeTo";
      } = {} as any
) {
  return useContractWrite<TMode, typeof theaErc1155ABI, "upgradeTo">({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "upgradeTo",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useTheaErc1155UpgradeToAndCall<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof theaErc1155ABI,
          "upgradeToAndCall"
        >["abi"],
        "upgradeToAndCall"
      > & { functionName?: "upgradeToAndCall" }
    : UseContractWriteConfig<
        TMode,
        typeof theaErc1155ABI,
        "upgradeToAndCall"
      > & {
        abi?: never;
        functionName?: "upgradeToAndCall";
      } = {} as any
) {
  return useContractWrite<TMode, typeof theaErc1155ABI, "upgradeToAndCall">({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "upgradeToAndCall",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__.
 */
export function usePrepareTheaErc1155Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof theaErc1155ABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    ...config,
  } as UsePrepareContractWriteConfig<typeof theaErc1155ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareTheaErc1155Burn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof theaErc1155ABI, "burn">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "burn",
    ...config,
  } as UsePrepareContractWriteConfig<typeof theaErc1155ABI, "burn">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"burnBatch"`.
 */
export function usePrepareTheaErc1155BurnBatch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof theaErc1155ABI, "burnBatch">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "burnBatch",
    ...config,
  } as UsePrepareContractWriteConfig<typeof theaErc1155ABI, "burnBatch">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareTheaErc1155Initialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof theaErc1155ABI, "initialize">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof theaErc1155ABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareTheaErc1155Mint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof theaErc1155ABI, "mint">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "mint",
    ...config,
  } as UsePrepareContractWriteConfig<typeof theaErc1155ABI, "mint">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"mintBatch"`.
 */
export function usePrepareTheaErc1155MintBatch(
  config: Omit<
    UsePrepareContractWriteConfig<typeof theaErc1155ABI, "mintBatch">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "mintBatch",
    ...config,
  } as UsePrepareContractWriteConfig<typeof theaErc1155ABI, "mintBatch">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareTheaErc1155Permit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof theaErc1155ABI, "permit">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof theaErc1155ABI, "permit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"safeBatchTransferFrom"`.
 */
export function usePrepareTheaErc1155SafeBatchTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof theaErc1155ABI,
      "safeBatchTransferFrom"
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "safeBatchTransferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof theaErc1155ABI,
    "safeBatchTransferFrom"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"safeTransferFrom"`.
 */
export function usePrepareTheaErc1155SafeTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof theaErc1155ABI, "safeTransferFrom">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "safeTransferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof theaErc1155ABI,
    "safeTransferFrom"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"setApprovalForAll"`.
 */
export function usePrepareTheaErc1155SetApprovalForAll(
  config: Omit<
    UsePrepareContractWriteConfig<typeof theaErc1155ABI, "setApprovalForAll">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "setApprovalForAll",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof theaErc1155ABI,
    "setApprovalForAll"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"setURI"`.
 */
export function usePrepareTheaErc1155SetUri(
  config: Omit<
    UsePrepareContractWriteConfig<typeof theaErc1155ABI, "setURI">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "setURI",
    ...config,
  } as UsePrepareContractWriteConfig<typeof theaErc1155ABI, "setURI">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareTheaErc1155UpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof theaErc1155ABI, "upgradeTo">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "upgradeTo",
    ...config,
  } as UsePrepareContractWriteConfig<typeof theaErc1155ABI, "upgradeTo">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link theaErc1155ABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareTheaErc1155UpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof theaErc1155ABI, "upgradeToAndCall">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    functionName: "upgradeToAndCall",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof theaErc1155ABI,
    "upgradeToAndCall"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link theaErc1155ABI}__.
 */
export function useTheaErc1155Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof theaErc1155ABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    ...config,
  } as UseContractEventConfig<typeof theaErc1155ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link theaErc1155ABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useTheaErc1155AdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof theaErc1155ABI, "AdminChanged">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    eventName: "AdminChanged",
    ...config,
  } as UseContractEventConfig<typeof theaErc1155ABI, "AdminChanged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link theaErc1155ABI}__ and `eventName` set to `"ApprovalForAll"`.
 */
export function useTheaErc1155ApprovalForAllEvent(
  config: Omit<
    UseContractEventConfig<typeof theaErc1155ABI, "ApprovalForAll">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    eventName: "ApprovalForAll",
    ...config,
  } as UseContractEventConfig<typeof theaErc1155ABI, "ApprovalForAll">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link theaErc1155ABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useTheaErc1155BeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof theaErc1155ABI, "BeaconUpgraded">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    eventName: "BeaconUpgraded",
    ...config,
  } as UseContractEventConfig<typeof theaErc1155ABI, "BeaconUpgraded">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link theaErc1155ABI}__ and `eventName` set to `"Initialized"`.
 */
export function useTheaErc1155InitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof theaErc1155ABI, "Initialized">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof theaErc1155ABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link theaErc1155ABI}__ and `eventName` set to `"TransferBatch"`.
 */
export function useTheaErc1155TransferBatchEvent(
  config: Omit<
    UseContractEventConfig<typeof theaErc1155ABI, "TransferBatch">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    eventName: "TransferBatch",
    ...config,
  } as UseContractEventConfig<typeof theaErc1155ABI, "TransferBatch">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link theaErc1155ABI}__ and `eventName` set to `"TransferSingle"`.
 */
export function useTheaErc1155TransferSingleEvent(
  config: Omit<
    UseContractEventConfig<typeof theaErc1155ABI, "TransferSingle">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    eventName: "TransferSingle",
    ...config,
  } as UseContractEventConfig<typeof theaErc1155ABI, "TransferSingle">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link theaErc1155ABI}__ and `eventName` set to `"URI"`.
 */
export function useTheaErc1155UriEvent(
  config: Omit<
    UseContractEventConfig<typeof theaErc1155ABI, "URI">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    eventName: "URI",
    ...config,
  } as UseContractEventConfig<typeof theaErc1155ABI, "URI">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link theaErc1155ABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useTheaErc1155UpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof theaErc1155ABI, "Upgraded">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: theaErc1155ABI,
    address: theaErc1155Address,
    eventName: "Upgraded",
    ...config,
  } as UseContractEventConfig<typeof theaErc1155ABI, "Upgraded">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link baseTokenManagerABI}__.
 */
export function useBaseTokenManager(
  config: Omit<UseContractConfig, "abi" | "address"> = {} as any
) {
  return useContract({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    ...config,
  });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenManagerABI}__.
 */
export function useBaseTokenManagerRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof baseTokenManagerABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<
      typeof baseTokenManagerABI,
      TFunctionName,
      TSelectData
    >,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    ...config,
  } as UseContractReadConfig<
    typeof baseTokenManagerABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useBaseTokenManagerDomainSeparator<
  TSelectData = ReadContractResult<
    typeof baseTokenManagerABI,
    "DOMAIN_SEPARATOR"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof baseTokenManagerABI,
      "DOMAIN_SEPARATOR",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<
    typeof baseTokenManagerABI,
    "DOMAIN_SEPARATOR",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"baseCharacteristics"`.
 */
export function useBaseTokenManagerBaseCharacteristics<
  TSelectData = ReadContractResult<
    typeof baseTokenManagerABI,
    "baseCharacteristics"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof baseTokenManagerABI,
      "baseCharacteristics",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "baseCharacteristics",
    ...config,
  } as UseContractReadConfig<
    typeof baseTokenManagerABI,
    "baseCharacteristics",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"baseTokenBeacon"`.
 */
export function useBaseTokenManagerBaseTokenBeacon<
  TSelectData = ReadContractResult<
    typeof baseTokenManagerABI,
    "baseTokenBeacon"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof baseTokenManagerABI,
      "baseTokenBeacon",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "baseTokenBeacon",
    ...config,
  } as UseContractReadConfig<
    typeof baseTokenManagerABI,
    "baseTokenBeacon",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"baseTokens"`.
 */
export function useBaseTokenManagerBaseTokens<
  TSelectData = ReadContractResult<typeof baseTokenManagerABI, "baseTokens">
>(
  config: Omit<
    UseContractReadConfig<
      typeof baseTokenManagerABI,
      "baseTokens",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "baseTokens",
    ...config,
  } as UseContractReadConfig<
    typeof baseTokenManagerABI,
    "baseTokens",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"lockedNFTAmountPerVintage"`.
 */
export function useBaseTokenManagerLockedNftAmountPerVintage<
  TSelectData = ReadContractResult<
    typeof baseTokenManagerABI,
    "lockedNFTAmountPerVintage"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof baseTokenManagerABI,
      "lockedNFTAmountPerVintage",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "lockedNFTAmountPerVintage",
    ...config,
  } as UseContractReadConfig<
    typeof baseTokenManagerABI,
    "lockedNFTAmountPerVintage",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"minVintage"`.
 */
export function useBaseTokenManagerMinVintage<
  TSelectData = ReadContractResult<typeof baseTokenManagerABI, "minVintage">
>(
  config: Omit<
    UseContractReadConfig<
      typeof baseTokenManagerABI,
      "minVintage",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "minVintage",
    ...config,
  } as UseContractReadConfig<
    typeof baseTokenManagerABI,
    "minVintage",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"pendingVintage"`.
 */
export function useBaseTokenManagerPendingVintage<
  TSelectData = ReadContractResult<typeof baseTokenManagerABI, "pendingVintage">
>(
  config: Omit<
    UseContractReadConfig<
      typeof baseTokenManagerABI,
      "pendingVintage",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "pendingVintage",
    ...config,
  } as UseContractReadConfig<
    typeof baseTokenManagerABI,
    "pendingVintage",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"ratingToken"`.
 */
export function useBaseTokenManagerRatingToken<
  TSelectData = ReadContractResult<typeof baseTokenManagerABI, "ratingToken">
>(
  config: Omit<
    UseContractReadConfig<
      typeof baseTokenManagerABI,
      "ratingToken",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "ratingToken",
    ...config,
  } as UseContractReadConfig<
    typeof baseTokenManagerABI,
    "ratingToken",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"registry"`.
 */
export function useBaseTokenManagerRegistry<
  TSelectData = ReadContractResult<typeof baseTokenManagerABI, "registry">
>(
  config: Omit<
    UseContractReadConfig<typeof baseTokenManagerABI, "registry", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "registry",
    ...config,
  } as UseContractReadConfig<
    typeof baseTokenManagerABI,
    "registry",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"sdgToken"`.
 */
export function useBaseTokenManagerSdgToken<
  TSelectData = ReadContractResult<typeof baseTokenManagerABI, "sdgToken">
>(
  config: Omit<
    UseContractReadConfig<typeof baseTokenManagerABI, "sdgToken", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "sdgToken",
    ...config,
  } as UseContractReadConfig<
    typeof baseTokenManagerABI,
    "sdgToken",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"sigNonces"`.
 */
export function useBaseTokenManagerSigNonces<
  TSelectData = ReadContractResult<typeof baseTokenManagerABI, "sigNonces">
>(
  config: Omit<
    UseContractReadConfig<typeof baseTokenManagerABI, "sigNonces", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "sigNonces",
    ...config,
  } as UseContractReadConfig<
    typeof baseTokenManagerABI,
    "sigNonces",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useBaseTokenManagerSupportsInterface<
  TSelectData = ReadContractResult<
    typeof baseTokenManagerABI,
    "supportsInterface"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof baseTokenManagerABI,
      "supportsInterface",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<
    typeof baseTokenManagerABI,
    "supportsInterface",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"theaERC1155"`.
 */
export function useBaseTokenManagerTheaErc1155<
  TSelectData = ReadContractResult<typeof baseTokenManagerABI, "theaERC1155">
>(
  config: Omit<
    UseContractReadConfig<
      typeof baseTokenManagerABI,
      "theaERC1155",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "theaERC1155",
    ...config,
  } as UseContractReadConfig<
    typeof baseTokenManagerABI,
    "theaERC1155",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"updateRollingTime"`.
 */
export function useBaseTokenManagerUpdateRollingTime<
  TSelectData = ReadContractResult<
    typeof baseTokenManagerABI,
    "updateRollingTime"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof baseTokenManagerABI,
      "updateRollingTime",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "updateRollingTime",
    ...config,
  } as UseContractReadConfig<
    typeof baseTokenManagerABI,
    "updateRollingTime",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"vintageToken"`.
 */
export function useBaseTokenManagerVintageToken<
  TSelectData = ReadContractResult<typeof baseTokenManagerABI, "vintageToken">
>(
  config: Omit<
    UseContractReadConfig<
      typeof baseTokenManagerABI,
      "vintageToken",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "vintageToken",
    ...config,
  } as UseContractReadConfig<
    typeof baseTokenManagerABI,
    "vintageToken",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__.
 */
export function useBaseTokenManagerWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof baseTokenManagerABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof baseTokenManagerABI,
        TFunctionName
      > & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof baseTokenManagerABI, TFunctionName>({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"convert"`.
 */
export function useBaseTokenManagerConvert<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof baseTokenManagerABI,
          "convert"
        >["abi"],
        "convert"
      > & { functionName?: "convert" }
    : UseContractWriteConfig<TMode, typeof baseTokenManagerABI, "convert"> & {
        abi?: never;
        functionName?: "convert";
      } = {} as any
) {
  return useContractWrite<TMode, typeof baseTokenManagerABI, "convert">({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "convert",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"convertWithSig"`.
 */
export function useBaseTokenManagerConvertWithSig<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof baseTokenManagerABI,
          "convertWithSig"
        >["abi"],
        "convertWithSig"
      > & { functionName?: "convertWithSig" }
    : UseContractWriteConfig<
        TMode,
        typeof baseTokenManagerABI,
        "convertWithSig"
      > & {
        abi?: never;
        functionName?: "convertWithSig";
      } = {} as any
) {
  return useContractWrite<TMode, typeof baseTokenManagerABI, "convertWithSig">({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "convertWithSig",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"initialize"`.
 */
export function useBaseTokenManagerInitialize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof baseTokenManagerABI,
          "initialize"
        >["abi"],
        "initialize"
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<
        TMode,
        typeof baseTokenManagerABI,
        "initialize"
      > & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any
) {
  return useContractWrite<TMode, typeof baseTokenManagerABI, "initialize">({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useBaseTokenManagerOnErc1155BatchReceived<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof baseTokenManagerABI,
          "onERC1155BatchReceived"
        >["abi"],
        "onERC1155BatchReceived"
      > & { functionName?: "onERC1155BatchReceived" }
    : UseContractWriteConfig<
        TMode,
        typeof baseTokenManagerABI,
        "onERC1155BatchReceived"
      > & {
        abi?: never;
        functionName?: "onERC1155BatchReceived";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof baseTokenManagerABI,
    "onERC1155BatchReceived"
  >({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "onERC1155BatchReceived",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useBaseTokenManagerOnErc1155Received<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof baseTokenManagerABI,
          "onERC1155Received"
        >["abi"],
        "onERC1155Received"
      > & { functionName?: "onERC1155Received" }
    : UseContractWriteConfig<
        TMode,
        typeof baseTokenManagerABI,
        "onERC1155Received"
      > & {
        abi?: never;
        functionName?: "onERC1155Received";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof baseTokenManagerABI,
    "onERC1155Received"
  >({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "onERC1155Received",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"prepareRollingWindowUpdate"`.
 */
export function useBaseTokenManagerPrepareRollingWindowUpdate<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof baseTokenManagerABI,
          "prepareRollingWindowUpdate"
        >["abi"],
        "prepareRollingWindowUpdate"
      > & { functionName?: "prepareRollingWindowUpdate" }
    : UseContractWriteConfig<
        TMode,
        typeof baseTokenManagerABI,
        "prepareRollingWindowUpdate"
      > & {
        abi?: never;
        functionName?: "prepareRollingWindowUpdate";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof baseTokenManagerABI,
    "prepareRollingWindowUpdate"
  >({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "prepareRollingWindowUpdate",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"recover"`.
 */
export function useBaseTokenManagerRecover<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof baseTokenManagerABI,
          "recover"
        >["abi"],
        "recover"
      > & { functionName?: "recover" }
    : UseContractWriteConfig<TMode, typeof baseTokenManagerABI, "recover"> & {
        abi?: never;
        functionName?: "recover";
      } = {} as any
) {
  return useContractWrite<TMode, typeof baseTokenManagerABI, "recover">({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "recover",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"recoverWithSig"`.
 */
export function useBaseTokenManagerRecoverWithSig<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof baseTokenManagerABI,
          "recoverWithSig"
        >["abi"],
        "recoverWithSig"
      > & { functionName?: "recoverWithSig" }
    : UseContractWriteConfig<
        TMode,
        typeof baseTokenManagerABI,
        "recoverWithSig"
      > & {
        abi?: never;
        functionName?: "recoverWithSig";
      } = {} as any
) {
  return useContractWrite<TMode, typeof baseTokenManagerABI, "recoverWithSig">({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "recoverWithSig",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"rollTokens"`.
 */
export function useBaseTokenManagerRollTokens<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof baseTokenManagerABI,
          "rollTokens"
        >["abi"],
        "rollTokens"
      > & { functionName?: "rollTokens" }
    : UseContractWriteConfig<
        TMode,
        typeof baseTokenManagerABI,
        "rollTokens"
      > & {
        abi?: never;
        functionName?: "rollTokens";
      } = {} as any
) {
  return useContractWrite<TMode, typeof baseTokenManagerABI, "rollTokens">({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "rollTokens",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"rollTokensWithSig"`.
 */
export function useBaseTokenManagerRollTokensWithSig<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof baseTokenManagerABI,
          "rollTokensWithSig"
        >["abi"],
        "rollTokensWithSig"
      > & { functionName?: "rollTokensWithSig" }
    : UseContractWriteConfig<
        TMode,
        typeof baseTokenManagerABI,
        "rollTokensWithSig"
      > & {
        abi?: never;
        functionName?: "rollTokensWithSig";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof baseTokenManagerABI,
    "rollTokensWithSig"
  >({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "rollTokensWithSig",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"setBaseTokenBeacon"`.
 */
export function useBaseTokenManagerSetBaseTokenBeacon<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof baseTokenManagerABI,
          "setBaseTokenBeacon"
        >["abi"],
        "setBaseTokenBeacon"
      > & { functionName?: "setBaseTokenBeacon" }
    : UseContractWriteConfig<
        TMode,
        typeof baseTokenManagerABI,
        "setBaseTokenBeacon"
      > & {
        abi?: never;
        functionName?: "setBaseTokenBeacon";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof baseTokenManagerABI,
    "setBaseTokenBeacon"
  >({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "setBaseTokenBeacon",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"updateRollingWindow"`.
 */
export function useBaseTokenManagerUpdateRollingWindow<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof baseTokenManagerABI,
          "updateRollingWindow"
        >["abi"],
        "updateRollingWindow"
      > & { functionName?: "updateRollingWindow" }
    : UseContractWriteConfig<
        TMode,
        typeof baseTokenManagerABI,
        "updateRollingWindow"
      > & {
        abi?: never;
        functionName?: "updateRollingWindow";
      } = {} as any
) {
  return useContractWrite<
    TMode,
    typeof baseTokenManagerABI,
    "updateRollingWindow"
  >({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "updateRollingWindow",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__.
 */
export function usePrepareBaseTokenManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseTokenManagerABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof baseTokenManagerABI,
    TFunctionName
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"convert"`.
 */
export function usePrepareBaseTokenManagerConvert(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseTokenManagerABI, "convert">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "convert",
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseTokenManagerABI, "convert">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"convertWithSig"`.
 */
export function usePrepareBaseTokenManagerConvertWithSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseTokenManagerABI, "convertWithSig">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "convertWithSig",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof baseTokenManagerABI,
    "convertWithSig"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareBaseTokenManagerInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseTokenManagerABI, "initialize">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseTokenManagerABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareBaseTokenManagerOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof baseTokenManagerABI,
      "onERC1155BatchReceived"
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "onERC1155BatchReceived",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof baseTokenManagerABI,
    "onERC1155BatchReceived"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareBaseTokenManagerOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof baseTokenManagerABI,
      "onERC1155Received"
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "onERC1155Received",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof baseTokenManagerABI,
    "onERC1155Received"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"prepareRollingWindowUpdate"`.
 */
export function usePrepareBaseTokenManagerPrepareRollingWindowUpdate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof baseTokenManagerABI,
      "prepareRollingWindowUpdate"
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "prepareRollingWindowUpdate",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof baseTokenManagerABI,
    "prepareRollingWindowUpdate"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"recover"`.
 */
export function usePrepareBaseTokenManagerRecover(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseTokenManagerABI, "recover">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "recover",
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseTokenManagerABI, "recover">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"recoverWithSig"`.
 */
export function usePrepareBaseTokenManagerRecoverWithSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseTokenManagerABI, "recoverWithSig">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "recoverWithSig",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof baseTokenManagerABI,
    "recoverWithSig"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"rollTokens"`.
 */
export function usePrepareBaseTokenManagerRollTokens(
  config: Omit<
    UsePrepareContractWriteConfig<typeof baseTokenManagerABI, "rollTokens">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "rollTokens",
    ...config,
  } as UsePrepareContractWriteConfig<typeof baseTokenManagerABI, "rollTokens">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"rollTokensWithSig"`.
 */
export function usePrepareBaseTokenManagerRollTokensWithSig(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof baseTokenManagerABI,
      "rollTokensWithSig"
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "rollTokensWithSig",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof baseTokenManagerABI,
    "rollTokensWithSig"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"setBaseTokenBeacon"`.
 */
export function usePrepareBaseTokenManagerSetBaseTokenBeacon(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof baseTokenManagerABI,
      "setBaseTokenBeacon"
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "setBaseTokenBeacon",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof baseTokenManagerABI,
    "setBaseTokenBeacon"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link baseTokenManagerABI}__ and `functionName` set to `"updateRollingWindow"`.
 */
export function usePrepareBaseTokenManagerUpdateRollingWindow(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof baseTokenManagerABI,
      "updateRollingWindow"
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    functionName: "updateRollingWindow",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof baseTokenManagerABI,
    "updateRollingWindow"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link baseTokenManagerABI}__.
 */
export function useBaseTokenManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof baseTokenManagerABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    ...config,
  } as UseContractEventConfig<typeof baseTokenManagerABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link baseTokenManagerABI}__ and `eventName` set to `"Converted"`.
 */
export function useBaseTokenManagerConvertedEvent(
  config: Omit<
    UseContractEventConfig<typeof baseTokenManagerABI, "Converted">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    eventName: "Converted",
    ...config,
  } as UseContractEventConfig<typeof baseTokenManagerABI, "Converted">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link baseTokenManagerABI}__ and `eventName` set to `"Initialized"`.
 */
export function useBaseTokenManagerInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof baseTokenManagerABI, "Initialized">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof baseTokenManagerABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link baseTokenManagerABI}__ and `eventName` set to `"PreparedRollingWindowUpdate"`.
 */
export function useBaseTokenManagerPreparedRollingWindowUpdateEvent(
  config: Omit<
    UseContractEventConfig<
      typeof baseTokenManagerABI,
      "PreparedRollingWindowUpdate"
    >,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    eventName: "PreparedRollingWindowUpdate",
    ...config,
  } as UseContractEventConfig<
    typeof baseTokenManagerABI,
    "PreparedRollingWindowUpdate"
  >);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link baseTokenManagerABI}__ and `eventName` set to `"Recovered"`.
 */
export function useBaseTokenManagerRecoveredEvent(
  config: Omit<
    UseContractEventConfig<typeof baseTokenManagerABI, "Recovered">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    eventName: "Recovered",
    ...config,
  } as UseContractEventConfig<typeof baseTokenManagerABI, "Recovered">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link baseTokenManagerABI}__ and `eventName` set to `"Rolled"`.
 */
export function useBaseTokenManagerRolledEvent(
  config: Omit<
    UseContractEventConfig<typeof baseTokenManagerABI, "Rolled">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    eventName: "Rolled",
    ...config,
  } as UseContractEventConfig<typeof baseTokenManagerABI, "Rolled">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link baseTokenManagerABI}__ and `eventName` set to `"UpdatedRollingWindow"`.
 */
export function useBaseTokenManagerUpdatedRollingWindowEvent(
  config: Omit<
    UseContractEventConfig<typeof baseTokenManagerABI, "UpdatedRollingWindow">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: baseTokenManagerABI,
    address: baseTokenManagerAddress,
    eventName: "UpdatedRollingWindow",
    ...config,
  } as UseContractEventConfig<
    typeof baseTokenManagerABI,
    "UpdatedRollingWindow"
  >);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link registryABI}__.
 */
export function useRegistry(
  config: Omit<UseContractConfig, "abi" | "address"> = {} as any
) {
  return useContract({ abi: registryABI, address: registryAddress, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__.
 */
export function useRegistryRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof registryABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>,
    "abi" | "address"
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    address: registryAddress,
    ...config,
  } as UseContractReadConfig<typeof registryABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useRegistryDomainSeparator<
  TSelectData = ReadContractResult<typeof registryABI, "DOMAIN_SEPARATOR">
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, "DOMAIN_SEPARATOR", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    address: registryAddress,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<
    typeof registryABI,
    "DOMAIN_SEPARATOR",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"KEY_CHARACTERISTIC"`.
 */
export function useRegistryKeyCharacteristic<
  TSelectData = ReadContractResult<typeof registryABI, "KEY_CHARACTERISTIC">
>(
  config: Omit<
    UseContractReadConfig<
      typeof registryABI,
      "KEY_CHARACTERISTIC",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    address: registryAddress,
    functionName: "KEY_CHARACTERISTIC",
    ...config,
  } as UseContractReadConfig<
    typeof registryABI,
    "KEY_CHARACTERISTIC",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"baseTokenManager"`.
 */
export function useRegistryBaseTokenManager<
  TSelectData = ReadContractResult<typeof registryABI, "baseTokenManager">
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, "baseTokenManager", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    address: registryAddress,
    functionName: "baseTokenManager",
    ...config,
  } as UseContractReadConfig<
    typeof registryABI,
    "baseTokenManager",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"btmDeployer"`.
 */
export function useRegistryBtmDeployer<
  TSelectData = ReadContractResult<typeof registryABI, "btmDeployer">
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, "btmDeployer", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    address: registryAddress,
    functionName: "btmDeployer",
    ...config,
  } as UseContractReadConfig<typeof registryABI, "btmDeployer", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"characteristics"`.
 */
export function useRegistryCharacteristics<
  TSelectData = ReadContractResult<typeof registryABI, "characteristics">
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, "characteristics", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    address: registryAddress,
    functionName: "characteristics",
    ...config,
  } as UseContractReadConfig<
    typeof registryABI,
    "characteristics",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"getCharacteristics"`.
 */
export function useRegistryGetCharacteristics<
  TSelectData = ReadContractResult<typeof registryABI, "getCharacteristics">
>(
  config: Omit<
    UseContractReadConfig<
      typeof registryABI,
      "getCharacteristics",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    address: registryAddress,
    functionName: "getCharacteristics",
    ...config,
  } as UseContractReadConfig<
    typeof registryABI,
    "getCharacteristics",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"getCharacteristicsBytes"`.
 */
export function useRegistryGetCharacteristicsBytes<
  TSelectData = ReadContractResult<
    typeof registryABI,
    "getCharacteristicsBytes"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof registryABI,
      "getCharacteristicsBytes",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    address: registryAddress,
    functionName: "getCharacteristicsBytes",
    ...config,
  } as UseContractReadConfig<
    typeof registryABI,
    "getCharacteristicsBytes",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"isRegistered"`.
 */
export function useRegistryIsRegistered<
  TSelectData = ReadContractResult<typeof registryABI, "isRegistered">
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, "isRegistered", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    address: registryAddress,
    functionName: "isRegistered",
    ...config,
  } as UseContractReadConfig<typeof registryABI, "isRegistered", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"isTokenizationIdUsed"`.
 */
export function useRegistryIsTokenizationIdUsed<
  TSelectData = ReadContractResult<typeof registryABI, "isTokenizationIdUsed">
>(
  config: Omit<
    UseContractReadConfig<
      typeof registryABI,
      "isTokenizationIdUsed",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    address: registryAddress,
    functionName: "isTokenizationIdUsed",
    ...config,
  } as UseContractReadConfig<
    typeof registryABI,
    "isTokenizationIdUsed",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"proxiableUUID"`.
 */
export function useRegistryProxiableUuid<
  TSelectData = ReadContractResult<typeof registryABI, "proxiableUUID">
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, "proxiableUUID", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    address: registryAddress,
    functionName: "proxiableUUID",
    ...config,
  } as UseContractReadConfig<typeof registryABI, "proxiableUUID", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"requests"`.
 */
export function useRegistryRequests<
  TSelectData = ReadContractResult<typeof registryABI, "requests">
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, "requests", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    address: registryAddress,
    functionName: "requests",
    ...config,
  } as UseContractReadConfig<typeof registryABI, "requests", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"retireFungibleRequestCounter"`.
 */
export function useRegistryRetireFungibleRequestCounter<
  TSelectData = ReadContractResult<
    typeof registryABI,
    "retireFungibleRequestCounter"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof registryABI,
      "retireFungibleRequestCounter",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    address: registryAddress,
    functionName: "retireFungibleRequestCounter",
    ...config,
  } as UseContractReadConfig<
    typeof registryABI,
    "retireFungibleRequestCounter",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"retireRequests"`.
 */
export function useRegistryRetireRequests<
  TSelectData = ReadContractResult<typeof registryABI, "retireRequests">
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, "retireRequests", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    address: registryAddress,
    functionName: "retireRequests",
    ...config,
  } as UseContractReadConfig<
    typeof registryABI,
    "retireRequests",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"sigNonces"`.
 */
export function useRegistrySigNonces<
  TSelectData = ReadContractResult<typeof registryABI, "sigNonces">
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, "sigNonces", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    address: registryAddress,
    functionName: "sigNonces",
    ...config,
  } as UseContractReadConfig<typeof registryABI, "sigNonces", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"supportsInterface"`.
 */
export function useRegistrySupportsInterface<
  TSelectData = ReadContractResult<typeof registryABI, "supportsInterface">
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, "supportsInterface", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    address: registryAddress,
    functionName: "supportsInterface",
    ...config,
  } as UseContractReadConfig<
    typeof registryABI,
    "supportsInterface",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"theaERC1155"`.
 */
export function useRegistryTheaErc1155<
  TSelectData = ReadContractResult<typeof registryABI, "theaERC1155">
>(
  config: Omit<
    UseContractReadConfig<typeof registryABI, "theaERC1155", TSelectData>,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    address: registryAddress,
    functionName: "theaERC1155",
    ...config,
  } as UseContractReadConfig<typeof registryABI, "theaERC1155", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"unwrapRequestCounter"`.
 */
export function useRegistryUnwrapRequestCounter<
  TSelectData = ReadContractResult<typeof registryABI, "unwrapRequestCounter">
>(
  config: Omit<
    UseContractReadConfig<
      typeof registryABI,
      "unwrapRequestCounter",
      TSelectData
    >,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: registryABI,
    address: registryAddress,
    functionName: "unwrapRequestCounter",
    ...config,
  } as UseContractReadConfig<
    typeof registryABI,
    "unwrapRequestCounter",
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__.
 */
export function useRegistryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registryABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof registryABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, TFunctionName>({
    abi: registryABI,
    address: registryAddress,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"closeRetireFungible"`.
 */
export function useRegistryCloseRetireFungible<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registryABI,
          "closeRetireFungible"
        >["abi"],
        "closeRetireFungible"
      > & { functionName?: "closeRetireFungible" }
    : UseContractWriteConfig<
        TMode,
        typeof registryABI,
        "closeRetireFungible"
      > & {
        abi?: never;
        functionName?: "closeRetireFungible";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "closeRetireFungible">({
    abi: registryABI,
    address: registryAddress,
    functionName: "closeRetireFungible",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"executeRetireFungible"`.
 */
export function useRegistryExecuteRetireFungible<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registryABI,
          "executeRetireFungible"
        >["abi"],
        "executeRetireFungible"
      > & { functionName?: "executeRetireFungible" }
    : UseContractWriteConfig<
        TMode,
        typeof registryABI,
        "executeRetireFungible"
      > & {
        abi?: never;
        functionName?: "executeRetireFungible";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "executeRetireFungible">({
    abi: registryABI,
    address: registryAddress,
    functionName: "executeRetireFungible",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"initialize"`.
 */
export function useRegistryInitialize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registryABI, "initialize">["abi"],
        "initialize"
      > & { functionName?: "initialize" }
    : UseContractWriteConfig<TMode, typeof registryABI, "initialize"> & {
        abi?: never;
        functionName?: "initialize";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "initialize">({
    abi: registryABI,
    address: registryAddress,
    functionName: "initialize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function useRegistryOnErc1155BatchReceived<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registryABI,
          "onERC1155BatchReceived"
        >["abi"],
        "onERC1155BatchReceived"
      > & { functionName?: "onERC1155BatchReceived" }
    : UseContractWriteConfig<
        TMode,
        typeof registryABI,
        "onERC1155BatchReceived"
      > & {
        abi?: never;
        functionName?: "onERC1155BatchReceived";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "onERC1155BatchReceived">({
    abi: registryABI,
    address: registryAddress,
    functionName: "onERC1155BatchReceived",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function useRegistryOnErc1155Received<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registryABI,
          "onERC1155Received"
        >["abi"],
        "onERC1155Received"
      > & { functionName?: "onERC1155Received" }
    : UseContractWriteConfig<TMode, typeof registryABI, "onERC1155Received"> & {
        abi?: never;
        functionName?: "onERC1155Received";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "onERC1155Received">({
    abi: registryABI,
    address: registryAddress,
    functionName: "onERC1155Received",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"register"`.
 */
export function useRegistryRegister<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registryABI, "register">["abi"],
        "register"
      > & { functionName?: "register" }
    : UseContractWriteConfig<TMode, typeof registryABI, "register"> & {
        abi?: never;
        functionName?: "register";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "register">({
    abi: registryABI,
    address: registryAddress,
    functionName: "register",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"registerAndTokenize"`.
 */
export function useRegistryRegisterAndTokenize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registryABI,
          "registerAndTokenize"
        >["abi"],
        "registerAndTokenize"
      > & { functionName?: "registerAndTokenize" }
    : UseContractWriteConfig<
        TMode,
        typeof registryABI,
        "registerAndTokenize"
      > & {
        abi?: never;
        functionName?: "registerAndTokenize";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "registerAndTokenize">({
    abi: registryABI,
    address: registryAddress,
    functionName: "registerAndTokenize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"requestRetireFungible"`.
 */
export function useRegistryRequestRetireFungible<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registryABI,
          "requestRetireFungible"
        >["abi"],
        "requestRetireFungible"
      > & { functionName?: "requestRetireFungible" }
    : UseContractWriteConfig<
        TMode,
        typeof registryABI,
        "requestRetireFungible"
      > & {
        abi?: never;
        functionName?: "requestRetireFungible";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "requestRetireFungible">({
    abi: registryABI,
    address: registryAddress,
    functionName: "requestRetireFungible",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"retire"`.
 */
export function useRegistryRetire<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registryABI, "retire">["abi"],
        "retire"
      > & { functionName?: "retire" }
    : UseContractWriteConfig<TMode, typeof registryABI, "retire"> & {
        abi?: never;
        functionName?: "retire";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "retire">({
    abi: registryABI,
    address: registryAddress,
    functionName: "retire",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"retireWithDetails"`.
 */
export function useRegistryRetireWithDetails<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registryABI,
          "retireWithDetails"
        >["abi"],
        "retireWithDetails"
      > & { functionName?: "retireWithDetails" }
    : UseContractWriteConfig<TMode, typeof registryABI, "retireWithDetails"> & {
        abi?: never;
        functionName?: "retireWithDetails";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "retireWithDetails">({
    abi: registryABI,
    address: registryAddress,
    functionName: "retireWithDetails",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"retireWithDetailsSig"`.
 */
export function useRegistryRetireWithDetailsSig<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registryABI,
          "retireWithDetailsSig"
        >["abi"],
        "retireWithDetailsSig"
      > & { functionName?: "retireWithDetailsSig" }
    : UseContractWriteConfig<
        TMode,
        typeof registryABI,
        "retireWithDetailsSig"
      > & {
        abi?: never;
        functionName?: "retireWithDetailsSig";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "retireWithDetailsSig">({
    abi: registryABI,
    address: registryAddress,
    functionName: "retireWithDetailsSig",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"retireWithSig"`.
 */
export function useRegistryRetireWithSig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registryABI, "retireWithSig">["abi"],
        "retireWithSig"
      > & { functionName?: "retireWithSig" }
    : UseContractWriteConfig<TMode, typeof registryABI, "retireWithSig"> & {
        abi?: never;
        functionName?: "retireWithSig";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "retireWithSig">({
    abi: registryABI,
    address: registryAddress,
    functionName: "retireWithSig",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"setBTMDeployer"`.
 */
export function useRegistrySetBtmDeployer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registryABI, "setBTMDeployer">["abi"],
        "setBTMDeployer"
      > & { functionName?: "setBTMDeployer" }
    : UseContractWriteConfig<TMode, typeof registryABI, "setBTMDeployer"> & {
        abi?: never;
        functionName?: "setBTMDeployer";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "setBTMDeployer">({
    abi: registryABI,
    address: registryAddress,
    functionName: "setBTMDeployer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"setBaseTokenManager"`.
 */
export function useRegistrySetBaseTokenManager<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registryABI,
          "setBaseTokenManager"
        >["abi"],
        "setBaseTokenManager"
      > & { functionName?: "setBaseTokenManager" }
    : UseContractWriteConfig<
        TMode,
        typeof registryABI,
        "setBaseTokenManager"
      > & {
        abi?: never;
        functionName?: "setBaseTokenManager";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "setBaseTokenManager">({
    abi: registryABI,
    address: registryAddress,
    functionName: "setBaseTokenManager",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"tokenize"`.
 */
export function useRegistryTokenize<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registryABI, "tokenize">["abi"],
        "tokenize"
      > & { functionName?: "tokenize" }
    : UseContractWriteConfig<TMode, typeof registryABI, "tokenize"> & {
        abi?: never;
        functionName?: "tokenize";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "tokenize">({
    abi: registryABI,
    address: registryAddress,
    functionName: "tokenize",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"unwrap"`.
 */
export function useRegistryUnwrap<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registryABI, "unwrap">["abi"],
        "unwrap"
      > & { functionName?: "unwrap" }
    : UseContractWriteConfig<TMode, typeof registryABI, "unwrap"> & {
        abi?: never;
        functionName?: "unwrap";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "unwrap">({
    abi: registryABI,
    address: registryAddress,
    functionName: "unwrap",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"unwrapWithSig"`.
 */
export function useRegistryUnwrapWithSig<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registryABI, "unwrapWithSig">["abi"],
        "unwrapWithSig"
      > & { functionName?: "unwrapWithSig" }
    : UseContractWriteConfig<TMode, typeof registryABI, "unwrapWithSig"> & {
        abi?: never;
        functionName?: "unwrapWithSig";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "unwrapWithSig">({
    abi: registryABI,
    address: registryAddress,
    functionName: "unwrapWithSig",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"updateRating"`.
 */
export function useRegistryUpdateRating<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registryABI, "updateRating">["abi"],
        "updateRating"
      > & { functionName?: "updateRating" }
    : UseContractWriteConfig<TMode, typeof registryABI, "updateRating"> & {
        abi?: never;
        functionName?: "updateRating";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "updateRating">({
    abi: registryABI,
    address: registryAddress,
    functionName: "updateRating",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"updateUnwrapRequest"`.
 */
export function useRegistryUpdateUnwrapRequest<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registryABI,
          "updateUnwrapRequest"
        >["abi"],
        "updateUnwrapRequest"
      > & { functionName?: "updateUnwrapRequest" }
    : UseContractWriteConfig<
        TMode,
        typeof registryABI,
        "updateUnwrapRequest"
      > & {
        abi?: never;
        functionName?: "updateUnwrapRequest";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "updateUnwrapRequest">({
    abi: registryABI,
    address: registryAddress,
    functionName: "updateUnwrapRequest",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function useRegistryUpgradeTo<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof registryABI, "upgradeTo">["abi"],
        "upgradeTo"
      > & { functionName?: "upgradeTo" }
    : UseContractWriteConfig<TMode, typeof registryABI, "upgradeTo"> & {
        abi?: never;
        functionName?: "upgradeTo";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "upgradeTo">({
    abi: registryABI,
    address: registryAddress,
    functionName: "upgradeTo",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function useRegistryUpgradeToAndCall<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof registryABI,
          "upgradeToAndCall"
        >["abi"],
        "upgradeToAndCall"
      > & { functionName?: "upgradeToAndCall" }
    : UseContractWriteConfig<TMode, typeof registryABI, "upgradeToAndCall"> & {
        abi?: never;
        functionName?: "upgradeToAndCall";
      } = {} as any
) {
  return useContractWrite<TMode, typeof registryABI, "upgradeToAndCall">({
    abi: registryABI,
    address: registryAddress,
    functionName: "upgradeToAndCall",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__.
 */
export function usePrepareRegistryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, TFunctionName>,
    "abi" | "address"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"closeRetireFungible"`.
 */
export function usePrepareRegistryCloseRetireFungible(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "closeRetireFungible">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "closeRetireFungible",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registryABI,
    "closeRetireFungible"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"executeRetireFungible"`.
 */
export function usePrepareRegistryExecuteRetireFungible(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "executeRetireFungible">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "executeRetireFungible",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registryABI,
    "executeRetireFungible"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareRegistryInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "initialize">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "initialize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, "initialize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"onERC1155BatchReceived"`.
 */
export function usePrepareRegistryOnErc1155BatchReceived(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "onERC1155BatchReceived">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "onERC1155BatchReceived",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registryABI,
    "onERC1155BatchReceived"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"onERC1155Received"`.
 */
export function usePrepareRegistryOnErc1155Received(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "onERC1155Received">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "onERC1155Received",
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, "onERC1155Received">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"register"`.
 */
export function usePrepareRegistryRegister(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "register">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "register",
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, "register">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"registerAndTokenize"`.
 */
export function usePrepareRegistryRegisterAndTokenize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "registerAndTokenize">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "registerAndTokenize",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registryABI,
    "registerAndTokenize"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"requestRetireFungible"`.
 */
export function usePrepareRegistryRequestRetireFungible(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "requestRetireFungible">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "requestRetireFungible",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registryABI,
    "requestRetireFungible"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"retire"`.
 */
export function usePrepareRegistryRetire(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "retire">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "retire",
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, "retire">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"retireWithDetails"`.
 */
export function usePrepareRegistryRetireWithDetails(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "retireWithDetails">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "retireWithDetails",
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, "retireWithDetails">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"retireWithDetailsSig"`.
 */
export function usePrepareRegistryRetireWithDetailsSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "retireWithDetailsSig">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "retireWithDetailsSig",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registryABI,
    "retireWithDetailsSig"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"retireWithSig"`.
 */
export function usePrepareRegistryRetireWithSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "retireWithSig">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "retireWithSig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, "retireWithSig">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"setBTMDeployer"`.
 */
export function usePrepareRegistrySetBtmDeployer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "setBTMDeployer">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "setBTMDeployer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, "setBTMDeployer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"setBaseTokenManager"`.
 */
export function usePrepareRegistrySetBaseTokenManager(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "setBaseTokenManager">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "setBaseTokenManager",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registryABI,
    "setBaseTokenManager"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"tokenize"`.
 */
export function usePrepareRegistryTokenize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "tokenize">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "tokenize",
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, "tokenize">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"unwrap"`.
 */
export function usePrepareRegistryUnwrap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "unwrap">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "unwrap",
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, "unwrap">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"unwrapWithSig"`.
 */
export function usePrepareRegistryUnwrapWithSig(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "unwrapWithSig">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "unwrapWithSig",
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, "unwrapWithSig">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"updateRating"`.
 */
export function usePrepareRegistryUpdateRating(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "updateRating">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "updateRating",
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, "updateRating">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"updateUnwrapRequest"`.
 */
export function usePrepareRegistryUpdateUnwrapRequest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "updateUnwrapRequest">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "updateUnwrapRequest",
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof registryABI,
    "updateUnwrapRequest"
  >);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"upgradeTo"`.
 */
export function usePrepareRegistryUpgradeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "upgradeTo">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "upgradeTo",
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, "upgradeTo">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link registryABI}__ and `functionName` set to `"upgradeToAndCall"`.
 */
export function usePrepareRegistryUpgradeToAndCall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof registryABI, "upgradeToAndCall">,
    "abi" | "address" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: registryABI,
    address: registryAddress,
    functionName: "upgradeToAndCall",
    ...config,
  } as UsePrepareContractWriteConfig<typeof registryABI, "upgradeToAndCall">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__.
 */
export function useRegistryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof registryABI, TEventName>,
    "abi" | "address"
  > = {} as any
) {
  return useContractEvent({
    abi: registryABI,
    address: registryAddress,
    ...config,
  } as UseContractEventConfig<typeof registryABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"AdminChanged"`.
 */
export function useRegistryAdminChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof registryABI, "AdminChanged">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: registryABI,
    address: registryAddress,
    eventName: "AdminChanged",
    ...config,
  } as UseContractEventConfig<typeof registryABI, "AdminChanged">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"BeaconUpgraded"`.
 */
export function useRegistryBeaconUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof registryABI, "BeaconUpgraded">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: registryABI,
    address: registryAddress,
    eventName: "BeaconUpgraded",
    ...config,
  } as UseContractEventConfig<typeof registryABI, "BeaconUpgraded">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"ClosedRetireFungible"`.
 */
export function useRegistryClosedRetireFungibleEvent(
  config: Omit<
    UseContractEventConfig<typeof registryABI, "ClosedRetireFungible">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: registryABI,
    address: registryAddress,
    eventName: "ClosedRetireFungible",
    ...config,
  } as UseContractEventConfig<typeof registryABI, "ClosedRetireFungible">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"Initialized"`.
 */
export function useRegistryInitializedEvent(
  config: Omit<
    UseContractEventConfig<typeof registryABI, "Initialized">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: registryABI,
    address: registryAddress,
    eventName: "Initialized",
    ...config,
  } as UseContractEventConfig<typeof registryABI, "Initialized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"RetireFungibleRequested"`.
 */
export function useRegistryRetireFungibleRequestedEvent(
  config: Omit<
    UseContractEventConfig<typeof registryABI, "RetireFungibleRequested">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: registryABI,
    address: registryAddress,
    eventName: "RetireFungibleRequested",
    ...config,
  } as UseContractEventConfig<typeof registryABI, "RetireFungibleRequested">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"Retired"`.
 */
export function useRegistryRetiredEvent(
  config: Omit<
    UseContractEventConfig<typeof registryABI, "Retired">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: registryABI,
    address: registryAddress,
    eventName: "Retired",
    ...config,
  } as UseContractEventConfig<typeof registryABI, "Retired">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"Tokenized"`.
 */
export function useRegistryTokenizedEvent(
  config: Omit<
    UseContractEventConfig<typeof registryABI, "Tokenized">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: registryABI,
    address: registryAddress,
    eventName: "Tokenized",
    ...config,
  } as UseContractEventConfig<typeof registryABI, "Tokenized">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"UnwrapRequested"`.
 */
export function useRegistryUnwrapRequestedEvent(
  config: Omit<
    UseContractEventConfig<typeof registryABI, "UnwrapRequested">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: registryABI,
    address: registryAddress,
    eventName: "UnwrapRequested",
    ...config,
  } as UseContractEventConfig<typeof registryABI, "UnwrapRequested">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"UpdatedBTMDeployer"`.
 */
export function useRegistryUpdatedBtmDeployerEvent(
  config: Omit<
    UseContractEventConfig<typeof registryABI, "UpdatedBTMDeployer">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: registryABI,
    address: registryAddress,
    eventName: "UpdatedBTMDeployer",
    ...config,
  } as UseContractEventConfig<typeof registryABI, "UpdatedBTMDeployer">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"UpdatedBaseTokenManager"`.
 */
export function useRegistryUpdatedBaseTokenManagerEvent(
  config: Omit<
    UseContractEventConfig<typeof registryABI, "UpdatedBaseTokenManager">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: registryABI,
    address: registryAddress,
    eventName: "UpdatedBaseTokenManager",
    ...config,
  } as UseContractEventConfig<typeof registryABI, "UpdatedBaseTokenManager">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"UpdatedRating"`.
 */
export function useRegistryUpdatedRatingEvent(
  config: Omit<
    UseContractEventConfig<typeof registryABI, "UpdatedRating">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: registryABI,
    address: registryAddress,
    eventName: "UpdatedRating",
    ...config,
  } as UseContractEventConfig<typeof registryABI, "UpdatedRating">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"UpdatedUnwrapRequest"`.
 */
export function useRegistryUpdatedUnwrapRequestEvent(
  config: Omit<
    UseContractEventConfig<typeof registryABI, "UpdatedUnwrapRequest">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: registryABI,
    address: registryAddress,
    eventName: "UpdatedUnwrapRequest",
    ...config,
  } as UseContractEventConfig<typeof registryABI, "UpdatedUnwrapRequest">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link registryABI}__ and `eventName` set to `"Upgraded"`.
 */
export function useRegistryUpgradedEvent(
  config: Omit<
    UseContractEventConfig<typeof registryABI, "Upgraded">,
    "abi" | "address" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: registryABI,
    address: registryAddress,
    eventName: "Upgraded",
    ...config,
  } as UseContractEventConfig<typeof registryABI, "Upgraded">);
}
